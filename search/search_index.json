{"config":{"lang":["en","vi"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Dynamic Bonding Curve Documentation","text":"<p>Comprehensive documentation for the Dynamic Bonding Curve Solana program.</p>"},{"location":"#program-overview","title":"Program Overview","text":"<p>The Dynamic Bonding Curve is a Solana program implementing an automated market maker (AMM) with: - Piecewise constant liquidity bonding curves - Dynamic fee system with volatility-based adjustments - Anti-sniper protection via rate limiters - Automatic liquidity migration to Meteora DEX - Multi-party fee distribution (protocol, partners, creators, referrals)</p> <p>Program ID: <code>dbcij3LWUppWqq96dh6gJWwBifmcGfLSB5D4DuSMaqN</code></p>"},{"location":"#documentation-structure","title":"Documentation Structure","text":""},{"location":"#quick-start","title":"Quick Start","text":"<p>New to bonding curves? Start here: 1. 00-overview.md - High-level introduction 2. 05-workflows.md - Common operations and examples 3. 01-instructions.md - Instruction reference</p>"},{"location":"#core-documentation","title":"Core Documentation","text":"File Description For Who 00-overview.md Program overview, architecture, and key concepts Everyone 01-instructions.md Complete instruction reference (25 instructions) Developers 02-state-accounts.md Account structures and PDAs Developers 03-bonding-curve-math.md Mathematical formulas and calculations Advanced developers 04-fee-system.md Fee mechanisms and distribution Integrators, traders 05-workflows.md Step-by-step guides and code examples Developers 06-migration.md Migration system and liquidity locking Advanced users"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#1-bonding-curve","title":"1. Bonding Curve","text":"<ul> <li>Up to 20 price points for flexible curve design</li> <li>Concentrated liquidity model (Uniswap V3-style)</li> <li>Q64.64 fixed-point math for precision</li> <li>Support for any price range ($0.000001 to $1,000,000)</li> </ul> <p>Learn more: 03-bonding-curve-math.md</p>"},{"location":"#2-dynamic-fees","title":"2. Dynamic Fees","text":"<ul> <li>Base fees: Decrease over time (linear or exponential)</li> <li>Dynamic fees: Increase with volatility</li> <li>Rate limiter: Anti-sniper protection</li> <li>Total fee: Capped at 99%</li> </ul> <p>Learn more: 04-fee-system.md</p>"},{"location":"#3-multi-party-distribution","title":"3. Multi-Party Distribution","text":"<pre><code>Total Fee (100%)\n\u251c\u2500 Protocol (20%)\n\u2502  \u251c\u2500 Protocol (80%)\n\u2502  \u2514\u2500 Referral (20%)\n\u2514\u2500 Trading (80%)\n   \u251c\u2500 Partner (50%)\n   \u2514\u2500 Creator (50%)\n</code></pre> <p>Learn more: 04-fee-system.md#4-fee-distribution</p>"},{"location":"#4-migration-system","title":"4. Migration System","text":"<ul> <li>Automatic migration to Meteora DAMM or DAMM V2</li> <li>LP token vesting with customizable schedules</li> <li>Surplus distribution (80% to partners/creators, 20% to protocol)</li> <li>Migration fees configurable (0.25% to 6%)</li> </ul> <p>Learn more: 06-migration.md</p>"},{"location":"#instruction-categories","title":"Instruction Categories","text":""},{"location":"#admin-4-instructions","title":"Admin (4 instructions)","text":"<ul> <li><code>create_claim_fee_operator</code> - Authorize fee claimer</li> <li><code>close_claim_fee_operator</code> - Revoke authorization</li> <li><code>claim_protocol_fee</code> - Claim protocol fees</li> <li><code>protocol_withdraw_surplus</code> - Withdraw post-migration surplus</li> </ul>"},{"location":"#partner-4-instructions","title":"Partner (4 instructions)","text":"<ul> <li><code>create_partner_metadata</code> - Create partner info</li> <li><code>create_config</code> - Create pool configuration</li> <li><code>claim_trading_fee</code> - Claim partner trading fees</li> <li><code>partner_withdraw_surplus</code> - Withdraw surplus</li> </ul>"},{"location":"#creator-5-instructions","title":"Creator (5 instructions)","text":"<ul> <li><code>initialize_virtual_pool_with_spl_token</code> - Create pool (SPL)</li> <li><code>initialize_virtual_pool_with_token2022</code> - Create pool (Token-2022)</li> <li><code>create_virtual_pool_metadata</code> - Add pool metadata</li> <li><code>claim_creator_trading_fee</code> - Claim creator fees</li> <li><code>creator_withdraw_surplus</code> - Withdraw surplus</li> <li><code>transfer_pool_creator</code> - Transfer ownership</li> </ul>"},{"location":"#trading-2-instructions","title":"Trading (2 instructions)","text":"<ul> <li><code>swap</code> - Legacy exact-in swap</li> <li><code>swap2</code> - Advanced swap (exact-in, exact-out, partial-fill)</li> </ul>"},{"location":"#migration-8-instructions","title":"Migration (8 instructions)","text":"<ul> <li><code>create_locker</code> - Create LP token locker</li> <li><code>withdraw_leftover</code> - Withdraw excess base tokens</li> <li><code>withdraw_migration_fee</code> - Claim migration fees</li> <li>Meteora DAMM migration (4 instructions)</li> <li>DAMM V2 migration (2 instructions)</li> </ul> <p>Full reference: 01-instructions.md</p>"},{"location":"#state-accounts","title":"State Accounts","text":"Account Size Purpose PoolConfig 1040 bytes Immutable pool configuration VirtualPool 416 bytes Mutable pool state PartnerMetadata Variable Partner information VirtualPoolMetadata Variable Pool metadata ClaimFeeOperator 40 bytes Fee claim authorization <p>Full reference: 02-state-accounts.md</p>"},{"location":"#common-workflows","title":"Common Workflows","text":""},{"location":"#creating-a-pool","title":"Creating a Pool","text":"<pre><code>// 1. Partner: Create configuration\nawait program.methods.createConfig(params)...\n\n// 2. Creator: Initialize pool\nawait program.methods.initializeVirtualPoolWithSplToken(metadata)...\n</code></pre> <p>Guide: 05-workflows.md#1-pool-creation-workflow</p>"},{"location":"#trading","title":"Trading","text":"<pre><code>// Buy tokens with USDC\nawait program.methods.swap2({\n    amount0: inputAmount,      // USDC in\n    amount1: minOutputAmount,  // Min tokens out\n    swapMode: 0,               // ExactIn\n})...\n</code></pre> <p>Guide: 05-workflows.md#2-trading-workflow</p>"},{"location":"#migration","title":"Migration","text":"<pre><code>// 1. Create locker\nawait program.methods.createLocker()...\n\n// 2. Create metadata\nawait program.methods.migrationDammV2CreateMetadata()...\n\n// 3. Execute migration\nawait program.methods.migrationDammV2()...\n</code></pre> <p>Guide: 05-workflows.md#4-migration-workflow</p>"},{"location":"#mathematical-details","title":"Mathematical Details","text":""},{"location":"#constant-product-formula","title":"Constant Product Formula","text":"<p>For each liquidity segment: <pre><code>x * y = L\u00b2\n</code></pre></p> <p>Where: - <code>x</code> = base token amount - <code>y</code> = quote token amount - <code>L</code> = liquidity constant</p>"},{"location":"#price-calculation","title":"Price Calculation","text":"<p>Prices stored as sqrt(price) in Q64.64 format: <pre><code>sqrt_price = \u221a(price_quote_per_base) * 2^64\n</code></pre></p>"},{"location":"#token-amount-formulas","title":"Token Amount Formulas","text":"<p>Base tokens: <pre><code>\u0394x = L * (1/\u221aP_lower - 1/\u221aP_upper)\n</code></pre></p> <p>Quote tokens: <pre><code>\u0394y = L * (\u221aP_upper - \u221aP_lower)\n</code></pre></p> <p>Full details: 03-bonding-curve-math.md</p>"},{"location":"#fee-calculations","title":"Fee Calculations","text":""},{"location":"#base-fee-time-decay","title":"Base Fee (Time-Decay)","text":"<p>Linear: <pre><code>fee(t) = cliff_fee - (periods * reduction_factor)\n</code></pre></p> <p>Exponential: <pre><code>fee(t) = cliff_fee * (1 - reduction_factor/10000)^periods\n</code></pre></p>"},{"location":"#dynamic-fee-volatility","title":"Dynamic Fee (Volatility)","text":"<pre><code>variable_fee = (volatility * bin_step)^2 * control / 10^11\ntotal_fee = base_fee + variable_fee\n</code></pre>"},{"location":"#rate-limiter-anti-sniper","title":"Rate Limiter (Anti-Sniper)","text":"<pre><code>penalty = (volume / reference) * increment_bps\neffective_fee = base_fee + penalty\n</code></pre> <p>Full details: 04-fee-system.md</p>"},{"location":"#program-architecture","title":"Program Architecture","text":"<pre><code>programs/\n\u2514\u2500\u2500 dynamic-bonding-curve/\n    \u251c\u2500\u2500 src/\n    \u2502   \u251c\u2500\u2500 lib.rs                    # Program entry point (25 instructions)\n    \u2502   \u251c\u2500\u2500 instructions/              # Instruction handlers\n    \u2502   \u2502   \u251c\u2500\u2500 admin/                # Admin operations\n    \u2502   \u2502   \u251c\u2500\u2500 partner/              # Partner operations\n    \u2502   \u2502   \u251c\u2500\u2500 creator/              # Creator operations\n    \u2502   \u2502   \u251c\u2500\u2500 swap/                 # Trading logic\n    \u2502   \u2502   \u251c\u2500\u2500 initialize_pool/      # Pool creation\n    \u2502   \u2502   \u2514\u2500\u2500 migration/            # Migration system\n    \u2502   \u251c\u2500\u2500 state/                    # Account structures\n    \u2502   \u2502   \u251c\u2500\u2500 config.rs             # PoolConfig (1040 bytes)\n    \u2502   \u2502   \u251c\u2500\u2500 virtual_pool.rs       # VirtualPool (416 bytes)\n    \u2502   \u2502   \u251c\u2500\u2500 fee.rs                # Fee tracking\n    \u2502   \u2502   \u2514\u2500\u2500 ...\n    \u2502   \u251c\u2500\u2500 math/                     # Mathematical operations\n    \u2502   \u2502   \u251c\u2500\u2500 safe_math.rs          # Overflow protection\n    \u2502   \u2502   \u251c\u2500\u2500 u128x128_math.rs      # Fixed-point math\n    \u2502   \u2502   \u2514\u2500\u2500 fee_math.rs           # Fee calculations\n    \u2502   \u251c\u2500\u2500 curve.rs                  # Bonding curve logic\n    \u2502   \u251c\u2500\u2500 base_fee/                 # Fee schedulers\n    \u2502   \u2502   \u251c\u2500\u2500 fee_scheduler.rs      # Time-based fees\n    \u2502   \u2502   \u2514\u2500\u2500 fee_rate_limiter.rs   # Anti-sniper\n    \u2502   \u251c\u2500\u2500 error.rs                  # Error definitions\n    \u2502   \u251c\u2500\u2500 event.rs                  # Event definitions\n    \u2502   \u2514\u2500\u2500 constants.rs              # Program constants\n    \u2514\u2500\u2500 Cargo.toml\n\nlibs/\n\u251c\u2500\u2500 damm-v2/                          # Meteora DAMM V2 integration\n\u251c\u2500\u2500 dynamic-amm/                      # Meteora DAMM integration\n\u2514\u2500\u2500 locker/                           # LP token vesting\n</code></pre>"},{"location":"#constants","title":"Constants","text":""},{"location":"#price-bounds","title":"Price Bounds","text":"<pre><code>MIN_SQRT_PRICE: u128 = 4_295_048_016              // ~$0.000001\nMAX_SQRT_PRICE: u128 = 79_226_673_521_066_979_... // ~$1,000,000\n</code></pre>"},{"location":"#fee-limits","title":"Fee Limits","text":"<pre><code>FEE_DENOMINATOR: u64 = 1_000_000_000   // 9 decimals\nMAX_FEE_BPS: u64 = 9900                // 99%\nMIN_FEE_BPS: u64 = 1                   // 0.01%\nPROTOCOL_FEE_PERCENT: u8 = 20          // 20%\n</code></pre>"},{"location":"#curve-configuration","title":"Curve Configuration","text":"<pre><code>MAX_CURVE_POINT_CONFIG: usize = 20     // Max price points\nSWAP_BUFFER_PERCENTAGE: u8 = 25        // 25% buffer\n</code></pre>"},{"location":"#distribution","title":"Distribution","text":"<pre><code>PARTNER_AND_CREATOR_SURPLUS_SHARE: u8 = 80  // 80%\n</code></pre>"},{"location":"#events","title":"Events","text":"<p>The program emits events for all major operations:</p> Event Emitted When <code>EvtCreateConfig</code> Pool config created <code>EvtInitializePool</code> Pool initialized <code>EvtSwap</code>, <code>EvtSwap2</code> Swap executed <code>EvtCurveComplete</code> Bonding curve completes <code>EvtClaimProtocolFee</code> Protocol fees claimed <code>EvtClaimTradingFee</code> Partner fees claimed <code>EvtClaimCreatorTradingFee</code> Creator fees claimed <code>EvtProtocolWithdrawSurplus</code> Protocol surplus withdrawn <code>EvtPartnerWithdrawSurplus</code> Partner surplus withdrawn <code>EvtCreatorWithdrawSurplus</code> Creator surplus withdrawn <code>EvtWithdrawMigrationFee</code> Migration fee withdrawn <code>EvtWithdrawLeftover</code> Leftover tokens withdrawn <code>EvtUpdatePoolCreator</code> Creator transferred"},{"location":"#error-codes","title":"Error Codes","text":"<p>Common errors:</p> Error Description <code>PoolIsCompleted</code> Cannot swap, curve complete <code>InsufficientLiquidityForMigration</code> Not enough base tokens <code>PoolIsNotCompleted</code> Migration not allowed yet <code>AmountIsZero</code> Invalid zero amount <code>AmountLeftIsNotZero</code> Exact output not achievable <code>MathOverflow</code> Calculation overflow <code>InvalidCollectFeeMode</code> Invalid fee mode <code>InvalidBaseFeeMode</code> Invalid fee scheduler <code>FailToValidateSingleSwapInstruction</code> Multiple swaps detected <p>Full list: See <code>programs/dynamic-bonding-curve/src/error.rs</code></p>"},{"location":"#sdk-and-integration","title":"SDK and Integration","text":""},{"location":"#typescript-sdk","title":"TypeScript SDK","text":"<p>Located in <code>dynamic-bonding-curve-sdk/</code>:</p> <pre><code>import {\n    quoteExactIn,\n    quoteExactOut,\n    quotePartialFill,\n} from 'dynamic-bonding-curve-sdk';\n\n// Simulate swap\nconst quote = quoteExactIn({\n    pool,\n    config,\n    amountIn: 1000000,\n    tradeDirection: 'QuoteToBase',\n});\n\nconsole.log(quote.outputAmount);\nconsole.log(quote.priceImpact);\n</code></pre>"},{"location":"#pda-helpers","title":"PDA Helpers","text":"<pre><code>import { PublicKey } from '@solana/web3.js';\n\nconst PROGRAM_ID = new PublicKey('dbcij3LWUppWqq96dh6gJWwBifmcGfLSB5D4DuSMaqN');\n\n// Pool PDA\nconst [poolPDA] = PublicKey.findProgramAddressSync(\n    [Buffer.from('pool'), baseMint.toBuffer(), config.toBuffer()],\n    PROGRAM_ID\n);\n\n// Config PDA\nconst [configPDA] = PublicKey.findProgramAddressSync(\n    [Buffer.from('config'), configIndexBuffer],\n    PROGRAM_ID\n);\n\n// Vault PDA\nconst [vaultPDA] = PublicKey.findProgramAddressSync(\n    [Buffer.from('token_vault'), pool.toBuffer(), mint.toBuffer()],\n    PROGRAM_ID\n);\n</code></pre>"},{"location":"#testing","title":"Testing","text":"<p>Run program tests:</p> <pre><code># Build program\nanchor build\n\n# Run tests\nanchor test\n\n# Run specific test\nanchor test -- --test test_swap\n</code></pre> <p>Test files located in <code>programs/dynamic-bonding-curve/src/tests/</code>: - <code>test_swap.rs</code> - Swap functionality - <code>test_create_config.rs</code> - Configuration - <code>test_dynamic_fee_params.rs</code> - Dynamic fees - <code>test_rate_limiter.rs</code> - Anti-sniper - <code>price_math.rs</code> - Price calculations</p>"},{"location":"#security-considerations","title":"Security Considerations","text":""},{"location":"#rounding","title":"Rounding","text":"<ul> <li>All input amounts: round UP (pool receives more)</li> <li>All output amounts: round DOWN (user receives less)</li> <li>All fees: round UP (pool receives more)</li> </ul>"},{"location":"#overflow-protection","title":"Overflow Protection","text":"<ul> <li>Uses <code>SafeMath</code> trait for all arithmetic</li> <li><code>U256</code> for intermediate calculations</li> <li>Checked conversions everywhere</li> </ul>"},{"location":"#access-control","title":"Access Control","text":"<ul> <li>Admin operations: <code>admin</code> signer required</li> <li>Fee claims: Authorized parties only</li> <li>Pool creation: Anyone can create</li> <li>Migration: Permissionless after completion</li> </ul>"},{"location":"#slippage-protection","title":"Slippage Protection","text":"<ul> <li><code>minimum_amount_out</code> for exact-in swaps</li> <li><code>maximum_amount_in</code> for exact-out swaps</li> <li>Price impact warnings in SDK</li> </ul>"},{"location":"#resources","title":"Resources","text":""},{"location":"#external-documentation","title":"External Documentation","text":"<ul> <li>Meteora DAMM Docs</li> <li>Uniswap V3 Whitepaper</li> <li>Anchor Documentation</li> <li>Solana Documentation</li> </ul>"},{"location":"#related-programs","title":"Related Programs","text":"<ul> <li>Meteora DAMM: Dynamic AMM for migrated liquidity</li> <li>Locker: LP token vesting</li> <li>Token Metadata: Metaplex token metadata</li> </ul>"},{"location":"#version-history","title":"Version History","text":"<ul> <li>v0.1.6 - Latest release</li> <li>v0.1.5 - Fee improvements</li> <li>v0.1.4 - Migration updates</li> <li>v0.1.3 - Creator features</li> <li>Earlier versions - See git history</li> </ul>"},{"location":"#license","title":"License","text":"<p>See repository root for license information.</p>"},{"location":"#support","title":"Support","text":"<p>For questions and issues: - GitHub Issues: Repository issues - Documentation: This directory - Code examples: <code>tests/</code> directory</p>"},{"location":"#quick-reference-card","title":"Quick Reference Card","text":""},{"location":"#essential-pdas","title":"Essential PDAs","text":"<pre><code>Pool:     [\"pool\", base_mint, config]\nConfig:   [\"config\", config_index]\nVault:    [\"token_vault\", pool, mint]\nAuthority: [\"pool_authority\"]\n</code></pre>"},{"location":"#common-operations","title":"Common Operations","text":"<pre><code>// Create pool\ncreateConfig() \u2192 initializePool()\n\n// Trade\nswap2({ amount0, amount1, swapMode: 0 })\n\n// Claim fees\nclaimTradingFee(maxBase, maxQuote)\n\n// Migrate\ncreateLocker() \u2192 createMetadata() \u2192 migrate()\n</code></pre>"},{"location":"#important-limits","title":"Important Limits","text":"<pre><code>Max curve points: 20\nMax fee: 99%\nMin fee: 0.01%\nPrice range: $0.000001 to $1,000,000\n</code></pre> <p>Last Updated: 2025-10-23</p>"},{"location":"00-overview/","title":"Dynamic Bonding Curve - Overview","text":""},{"location":"00-overview/#what-is-it","title":"What is it?","text":"<p>The Dynamic Bonding Curve is a Solana program that implements an automated market maker (AMM) with a bonding curve mechanism. It's designed for launching new tokens with a fair price discovery mechanism and automatic liquidity migration to established DEXs.</p>"},{"location":"00-overview/#key-concepts","title":"Key Concepts","text":""},{"location":"00-overview/#1-bonding-curve","title":"1. Bonding Curve","text":"<p>A bonding curve is a mathematical relationship between token price and supply. As more tokens are purchased, the price increases along a predetermined curve. This program implements a piecewise constant liquidity bonding curve, similar to Uniswap V3.</p>"},{"location":"00-overview/#2-virtual-pool","title":"2. Virtual Pool","text":"<p>The core trading mechanism uses \"virtual pools\" - on-chain accounts that maintain: - Base token reserves (the new token being launched) - Quote token reserves (usually USDC, SOL, or another established token) - Current price (stored as sqrt_price for mathematical precision) - Fee accumulation and distribution</p>"},{"location":"00-overview/#3-dynamic-fees","title":"3. Dynamic Fees","text":"<p>The program implements a sophisticated fee system that combines: - Base fees: Time-based fees that can decrease over time (linear or exponential decay) - Dynamic fees: Volatility-based fees that increase during high trading activity - Rate limiter: Anti-sniper protection that increases fees for rapid trading</p>"},{"location":"00-overview/#4-migration-system","title":"4. Migration System","text":"<p>When a bonding curve completes (reaches its target), the accumulated liquidity can be migrated to: - Meteora Dynamic AMM (DAMM V1) - Meteora Dynamic AMM V2 (DAMM V2)</p> <p>The migration includes LP token locking mechanisms to ensure long-term liquidity.</p>"},{"location":"00-overview/#program-architecture","title":"Program Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                  Dynamic Bonding Curve Program               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                              \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u2502\n\u2502  \u2502   Config     \u2502  \u2502 Virtual Pool \u2502  \u2502   Metadata   \u2502     \u2502\n\u2502  \u2502              \u2502  \u2502              \u2502  \u2502              \u2502     \u2502\n\u2502  \u2502 \u2022 Fee params \u2502  \u2502 \u2022 Reserves   \u2502  \u2502 \u2022 Partner    \u2502     \u2502\n\u2502  \u2502 \u2022 Curve      \u2502  \u2502 \u2022 Price      \u2502  \u2502 \u2022 Creator    \u2502     \u2502\n\u2502  \u2502 \u2022 Migration  \u2502  \u2502 \u2022 Fees       \u2502  \u2502 \u2022 Pool Info  \u2502     \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2502\n\u2502                                                              \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502              Instruction Handlers                     \u2502  \u2502\n\u2502  \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524  \u2502\n\u2502  \u2502 \u2022 Pool Creation &amp; Initialization                     \u2502  \u2502\n\u2502  \u2502 \u2022 Swap Operations (Exact In/Out, Partial Fill)       \u2502  \u2502\n\u2502  \u2502 \u2022 Fee Management &amp; Claims                            \u2502  \u2502\n\u2502  \u2502 \u2022 Migration &amp; Liquidity Locking                      \u2502  \u2502\n\u2502  \u2502 \u2022 Admin Operations                                    \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                                                              \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502                 Math &amp; Curve Logic                    \u2502  \u2502\n\u2502  \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524  \u2502\n\u2502  \u2502 \u2022 Sqrt price calculations (x64.64 fixed-point)       \u2502  \u2502\n\u2502  \u2502 \u2022 Liquidity distribution across price points         \u2502  \u2502\n\u2502  \u2502 \u2022 Fee computation (base + dynamic + rate limiter)    \u2502  \u2502\n\u2502  \u2502 \u2022 Slippage protection                                \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                                                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"00-overview/#key-features","title":"Key Features","text":"<ol> <li>Fair Launch Mechanism: Bonding curves ensure transparent price discovery</li> <li>Anti-Sniper Protection: Rate limiters prevent front-running and rapid trading</li> <li>Dynamic Fee System: Fees adapt to market volatility</li> <li>Automatic Migration: Seamless transition to established DEXs</li> <li>Multi-Party Fee Distribution: Fair distribution between protocol, creators, and partners</li> <li>Token Flexibility: Supports both SPL Token and Token-2022</li> <li>Vesting &amp; Locking: Built-in token vesting and LP token locking mechanisms</li> </ol>"},{"location":"00-overview/#stakeholders","title":"Stakeholders","text":""},{"location":"00-overview/#1-protocol-admin","title":"1. Protocol (Admin)","text":"<ul> <li>Collects protocol fees</li> <li>Can withdraw surplus after migration</li> <li>Manages claim operators</li> </ul>"},{"location":"00-overview/#2-partner","title":"2. Partner","text":"<ul> <li>Platform or service that integrates the bonding curve</li> <li>Receives share of trading fees and migration fees</li> <li>Can configure pool parameters</li> <li>Receives LP tokens after migration</li> </ul>"},{"location":"00-overview/#3-creator","title":"3. Creator","text":"<ul> <li>Token creator who launches the bonding curve</li> <li>Receives share of trading fees</li> <li>Can claim migration fees</li> <li>Receives LP tokens after migration</li> <li>Can transfer ownership</li> </ul>"},{"location":"00-overview/#4-traders","title":"4. Traders","text":"<ul> <li>Buy and sell tokens along the bonding curve</li> <li>Pay trading fees</li> <li>Can provide referral for fee sharing</li> </ul>"},{"location":"00-overview/#program-id","title":"Program ID","text":"<pre><code>dbcij3LWUppWqq96dh6gJWwBifmcGfLSB5D4DuSMaqN\n</code></pre>"},{"location":"00-overview/#next-steps","title":"Next Steps","text":"<p>Continue reading: - 01-instructions.md - Detailed instruction reference - 02-state-accounts.md - Account structure documentation - 03-bonding-curve-math.md - Mathematical details - 04-fee-system.md - Fee calculation and distribution - 05-workflows.md - Common workflows and operations - 06-migration.md - Migration process details</p>"},{"location":"01-instructions/","title":"Instructions Reference","text":"<p>This document provides a comprehensive list of all program instructions organized by category.</p>"},{"location":"01-instructions/#instruction-summary","title":"Instruction Summary","text":"<p>The program contains 25 instructions organized into 6 categories:</p> Category Instructions Admin 4 instructions Partner 4 instructions Creator 5 instructions Pool Initialization 2 instructions Trading 2 instructions Migration 8 instructions"},{"location":"01-instructions/#1-admin-instructions","title":"1. Admin Instructions","text":""},{"location":"01-instructions/#11-create_claim_fee_operator","title":"1.1 <code>create_claim_fee_operator</code>","text":"<p>Creates an operator account that can claim protocol fees on behalf of the protocol.</p> <p>Parameters: None</p> <p>Accounts: - <code>claim_fee_operator</code> - New claim operator PDA (mut) - <code>operator</code> - Operator wallet (signer) - <code>admin</code> - Protocol admin (signer) - <code>system_program</code></p> <p>Access: Admin only</p> <p>Event: <code>EvtCreateClaimFeeOperator</code></p>"},{"location":"01-instructions/#12-close_claim_fee_operator","title":"1.2 <code>close_claim_fee_operator</code>","text":"<p>Closes a claim fee operator account.</p> <p>Parameters: None</p> <p>Accounts: - <code>claim_fee_operator</code> - Existing operator PDA (mut) - <code>operator</code> - Operator wallet - <code>admin</code> - Protocol admin (signer)</p> <p>Access: Admin only</p> <p>Event: <code>EvtCloseClaimFeeOperator</code></p>"},{"location":"01-instructions/#13-claim_protocol_fee","title":"1.3 <code>claim_protocol_fee</code>","text":"<p>Claims accumulated protocol fees from a pool.</p> <p>Parameters: - <code>max_amount_a: u64</code> - Maximum base token to claim - <code>max_amount_b: u64</code> - Maximum quote token to claim</p> <p>Accounts: - <code>claim_fee_operator</code> - Claim operator PDA - <code>pool</code> - Virtual pool (mut) - <code>base_vault</code> - Pool's base token vault (mut) - <code>quote_vault</code> - Pool's quote token vault (mut) - <code>fee_claimer_base_account</code> - Destination for base fees (mut) - <code>fee_claimer_quote_account</code> - Destination for quote fees (mut) - Token programs and authority</p> <p>Access: Claim operator only</p> <p>Event: <code>EvtClaimProtocolFee</code></p> <p>Location: <code>programs/dynamic-bonding-curve/src/instructions/admin/ix_claim_protocol_fee.rs</code></p>"},{"location":"01-instructions/#14-protocol_withdraw_surplus","title":"1.4 <code>protocol_withdraw_surplus</code>","text":"<p>Withdraws surplus quote tokens after migration is complete.</p> <p>Parameters: None</p> <p>Accounts: - <code>config</code> - Pool config - <code>pool</code> - Virtual pool (mut) - <code>quote_vault</code> - Pool's quote vault (mut) - Various fee claimer accounts</p> <p>Access: Protocol only</p> <p>Event: <code>EvtProtocolWithdrawSurplus</code></p> <p>Conditions: - Pool must be migrated - Surplus must not have been withdrawn yet</p> <p>Location: <code>programs/dynamic-bonding-curve/src/instructions/admin/ix_withdraw_protocol_surplus.rs</code></p>"},{"location":"01-instructions/#2-partner-instructions","title":"2. Partner Instructions","text":""},{"location":"01-instructions/#21-create_partner_metadata","title":"2.1 <code>create_partner_metadata</code>","text":"<p>Creates partner metadata for tracking partner information.</p> <p>Parameters: - <code>metadata: CreatePartnerMetadataParameters</code>   - <code>name: String</code>   - <code>uri: String</code></p> <p>Accounts: - <code>partner_metadata</code> - New metadata PDA (mut) - <code>partner</code> - Partner wallet (signer) - <code>system_program</code></p> <p>Event: <code>EvtPartnerMetadata</code></p> <p>Location: <code>programs/dynamic-bonding-curve/src/instructions/partner/ix_create_partner_metadata.rs</code></p>"},{"location":"01-instructions/#22-create_config","title":"2.2 <code>create_config</code>","text":"<p>Creates a new pool configuration. This is the first step before initializing a pool.</p> <p>Parameters: - <code>config_parameters: ConfigParameters</code> - Complex configuration object</p> <p>Config Parameters Include: - <code>pool_fees: PoolFeeParameters</code> - Fee configuration - <code>creator_trading_fee_percentage: u8</code> - Creator's share of trading fees - <code>token_update_authority: u8</code> - Token authority option - <code>migration_fee: MigrationFee</code> - Migration fee settings - <code>collect_fee_mode: u8</code> - QuoteToken or OutputToken - <code>migration_option: u8</code> - MeteoraDamm or DammV2 - <code>activation_type: u8</code> - Slot or timestamp based - <code>token_decimal: u8</code> - <code>token_type: u8</code> - SplToken or Token2022 - Pool parameters (swap amounts, thresholds, etc.) - <code>curve: Vec&lt;LiquidityDistributionParameters&gt;</code> - Bonding curve definition</p> <p>Accounts: - <code>config</code> - New config PDA (mut) - <code>quote_mint</code> - Quote token mint - <code>partner</code> - Partner wallet (signer, pays rent) - <code>fee_claimer</code> - Fee recipient - <code>leftover_receiver</code> - Leftover token recipient - <code>system_program</code></p> <p>Event: <code>EvtCreateConfigV2</code></p> <p>Location: <code>programs/dynamic-bonding-curve/src/instructions/partner/ix_create_config.rs:48</code></p>"},{"location":"01-instructions/#23-claim_trading_fee","title":"2.3 <code>claim_trading_fee</code>","text":"<p>Claims partner's share of accumulated trading fees.</p> <p>Parameters: - <code>max_amount_a: u64</code> - Max base tokens to claim - <code>max_amount_b: u64</code> - Max quote tokens to claim</p> <p>Accounts: - <code>config</code> - Pool config - <code>pool</code> - Virtual pool (mut) - <code>partner</code> - Partner wallet (signer) - Vault and token accounts for transfer</p> <p>Event: <code>EvtClaimTradingFee</code></p> <p>Location: <code>programs/dynamic-bonding-curve/src/instructions/partner/ix_claim_partner_trading_fee.rs</code></p>"},{"location":"01-instructions/#24-partner_withdraw_surplus","title":"2.4 <code>partner_withdraw_surplus</code>","text":"<p>Withdraws partner's share of surplus after migration.</p> <p>Parameters: None</p> <p>Accounts: - <code>config</code> - Pool config - <code>pool</code> - Virtual pool (mut) - <code>partner</code> - Partner wallet (signer) - Token accounts for withdrawal</p> <p>Access: Partner only</p> <p>Event: <code>EvtPartnerWithdrawSurplus</code></p> <p>Location: <code>programs/dynamic-bonding-curve/src/instructions/partner/ix_withdraw_partner_surplus.rs</code></p>"},{"location":"01-instructions/#3-creator-instructions","title":"3. Creator Instructions","text":""},{"location":"01-instructions/#31-initialize_virtual_pool_with_spl_token","title":"3.1 <code>initialize_virtual_pool_with_spl_token</code>","text":"<p>Initializes a new virtual pool with an SPL token mint.</p> <p>Parameters: - <code>params: InitializePoolParameters</code>   - <code>token_metadata: TokenMetadataInput</code> - Name, symbol, URI   - <code>initial_base_amount: u64</code> - Initial base token amount</p> <p>Accounts (19 accounts): - <code>pool</code> - New virtual pool (mut) - <code>config</code> - Pool configuration - <code>creator</code> - Pool creator (signer, pays) - <code>base_mint</code> - Base token mint (mut, created) - <code>base_vault</code> - Base token vault (mut, created) - <code>quote_vault</code> - Quote token vault (mut, created) - Metaplex metadata accounts - Token program and system program</p> <p>Event: <code>EvtInitializePool</code></p> <p>Location: <code>programs/dynamic-bonding-curve/src/instructions/initialize_pool/ix_initialize_virtual_pool_with_spl_token.rs:44</code></p>"},{"location":"01-instructions/#32-initialize_virtual_pool_with_token2022","title":"3.2 <code>initialize_virtual_pool_with_token2022</code>","text":"<p>Initializes a new virtual pool with a Token-2022 mint.</p> <p>Parameters: Same as SPL token version</p> <p>Accounts: Similar to SPL version but uses Token-2022 program</p> <p>Event: <code>EvtInitializePool</code></p> <p>Location: <code>programs/dynamic-bonding-curve/src/instructions/initialize_pool/ix_initialize_virtual_pool_with_token2022.rs</code></p>"},{"location":"01-instructions/#33-create_virtual_pool_metadata","title":"3.3 <code>create_virtual_pool_metadata</code>","text":"<p>Creates metadata for an existing virtual pool.</p> <p>Parameters: - <code>metadata: CreateVirtualPoolMetadataParameters</code>   - <code>name: String</code>   - <code>uri: String</code></p> <p>Accounts: - <code>virtual_pool_metadata</code> - New metadata PDA (mut) - <code>pool</code> - Virtual pool - <code>creator</code> - Creator wallet (signer) - <code>system_program</code></p> <p>Event: <code>EvtVirtualPoolMetadata</code></p> <p>Location: <code>programs/dynamic-bonding-curve/src/instructions/creator/ix_create_virtual_pool_metadata.rs</code></p>"},{"location":"01-instructions/#34-claim_creator_trading_fee","title":"3.4 <code>claim_creator_trading_fee</code>","text":"<p>Claims creator's share of accumulated trading fees.</p> <p>Parameters: - <code>max_base_amount: u64</code> - <code>max_quote_amount: u64</code></p> <p>Accounts: - <code>config</code> - Pool config - <code>pool</code> - Virtual pool (mut) - <code>creator</code> - Creator wallet (signer) - Token accounts for transfer</p> <p>Event: <code>EvtClaimCreatorTradingFee</code></p> <p>Location: <code>programs/dynamic-bonding-curve/src/instructions/creator/ix_claim_creator_trading_fee.rs</code></p>"},{"location":"01-instructions/#35-creator_withdraw_surplus","title":"3.5 <code>creator_withdraw_surplus</code>","text":"<p>Withdraws creator's share of surplus after migration.</p> <p>Parameters: None</p> <p>Accounts: - <code>config</code> - Pool config - <code>pool</code> - Virtual pool (mut) - <code>creator</code> - Creator wallet (signer) - Token accounts for withdrawal</p> <p>Event: <code>EvtCreatorWithdrawSurplus</code></p> <p>Location: <code>programs/dynamic-bonding-curve/src/instructions/creator/ix_withdraw_creator_surplus.rs</code></p>"},{"location":"01-instructions/#36-transfer_pool_creator","title":"3.6 <code>transfer_pool_creator</code>","text":"<p>Transfers pool creator ownership to a new address.</p> <p>Parameters: None</p> <p>Accounts: - <code>pool</code> - Virtual pool (mut) - <code>creator</code> - Current creator (signer) - <code>new_creator</code> - New creator wallet</p> <p>Access: Current creator only</p> <p>Event: <code>EvtUpdatePoolCreator</code></p> <p>Location: <code>programs/dynamic-bonding-curve/src/instructions/creator/ix_transfer_pool_creator.rs</code></p>"},{"location":"01-instructions/#4-trading-instructions","title":"4. Trading Instructions","text":""},{"location":"01-instructions/#41-swap","title":"4.1 <code>swap</code>","text":"<p>Legacy swap instruction (exact input only).</p> <p>Parameters: - <code>params: SwapParameters</code>   - <code>amount_in: u64</code> - Input token amount   - <code>minimum_amount_out: u64</code> - Minimum output (slippage protection)</p> <p>Accounts: - <code>pool_authority</code> - PDA authority - <code>config</code> - Pool config - <code>pool</code> - Virtual pool (mut) - <code>input_token_account</code> - User's input tokens (mut) - <code>output_token_account</code> - User's output tokens (mut) - <code>base_vault</code> - Pool's base vault (mut) - <code>quote_vault</code> - Pool's quote vault (mut) - <code>base_mint</code> - Base token mint - <code>quote_mint</code> - Quote token mint - <code>payer</code> - User wallet (signer) - Token programs - <code>referral_token_account</code> - Optional referral account (mut)</p> <p>Events: <code>EvtSwap</code>, <code>EvtSwap2</code>, <code>EvtCurveComplete</code> (if curve completes)</p> <p>Location: <code>programs/dynamic-bonding-curve/src/lib.rs:123</code></p>"},{"location":"01-instructions/#42-swap2","title":"4.2 <code>swap2</code>","text":"<p>Advanced swap instruction supporting multiple swap modes.</p> <p>Parameters: - <code>params: SwapParameters2</code>   - <code>amount_0: u64</code> - Amount (meaning depends on swap_mode)   - <code>amount_1: u64</code> - Limit amount (meaning depends on swap_mode)   - <code>swap_mode: u8</code> - SwapMode enum value</p> <p>Swap Modes: - <code>ExactIn (0)</code>: Exact input amount, minimum output - <code>PartialFill (1)</code>: Partial fill up to migration threshold - <code>ExactOut (2)</code>: Exact output amount, maximum input</p> <p>Accounts: Same as <code>swap</code></p> <p>Events: <code>EvtSwap</code>, <code>EvtSwap2</code>, <code>EvtCurveComplete</code></p> <p>Special Features: - Rate limiter validation for anti-sniping - Single swap instruction validation - Automatic curve completion detection</p> <p>Location: <code>programs/dynamic-bonding-curve/src/lib.rs:135</code></p> <p>Handler: <code>programs/dynamic-bonding-curve/src/instructions/swap/ix_swap.rs:119</code></p>"},{"location":"01-instructions/#5-migration-instructions","title":"5. Migration Instructions","text":""},{"location":"01-instructions/#51-create_locker","title":"5.1 <code>create_locker</code>","text":"<p>Creates a locker account for locked LP tokens.</p> <p>Parameters: None</p> <p>Accounts (permissionless): - <code>locker</code> - New locker PDA (mut) - <code>pool</code> - Virtual pool - <code>payer</code> - Transaction payer (signer) - <code>system_program</code></p> <p>Access: Permissionless</p> <p>Location: <code>programs/dynamic-bonding-curve/src/instructions/migration/create_locker.rs</code></p>"},{"location":"01-instructions/#52-withdraw_leftover","title":"5.2 <code>withdraw_leftover</code>","text":"<p>Withdraws leftover base tokens after pool initialization.</p> <p>Parameters: None</p> <p>Accounts: - <code>config</code> - Pool config - <code>pool</code> - Virtual pool (mut) - <code>leftover_receiver</code> - Receiver account (mut) - <code>base_vault</code> - Pool's base vault (mut) - Token accounts and programs</p> <p>Conditions: - Pool must be migrated - Leftover not yet withdrawn</p> <p>Event: <code>EvtWithdrawLeftover</code></p> <p>Location: <code>programs/dynamic-bonding-curve/src/instructions/migration/withdraw_leftover.rs</code></p>"},{"location":"01-instructions/#53-withdraw_migration_fee","title":"5.3 <code>withdraw_migration_fee</code>","text":"<p>Withdraws migration fees for partner or creator.</p> <p>Parameters: - <code>flag: u8</code> - Bitflag (0b100 = partner, 0b010 = creator)</p> <p>Accounts: - <code>config</code> - Pool config - <code>pool</code> - Virtual pool (mut) - Various token accounts</p> <p>Event: <code>EvtWithdrawMigrationFee</code></p> <p>Location: <code>programs/dynamic-bonding-curve/src/instructions/migration/ix_withdraw_migration_fee.rs</code></p>"},{"location":"01-instructions/#54-meteora-damm-migration-4-instructions","title":"5.4 Meteora DAMM Migration (4 instructions)","text":""},{"location":"01-instructions/#migration_meteora_damm_create_metadata","title":"<code>migration_meteora_damm_create_metadata</code>","text":"<p>Creates migration metadata for Meteora DAMM.</p> <p>Location: <code>programs/dynamic-bonding-curve/src/instructions/migration/meteora_damm/migration_meteora_damm_create_metadata.rs</code></p>"},{"location":"01-instructions/#migrate_meteora_damm","title":"<code>migrate_meteora_damm</code>","text":"<p>Initializes the Meteora DAMM pool with migrated liquidity.</p> <p>Location: <code>programs/dynamic-bonding-curve/src/instructions/migration/meteora_damm/migrate_meteora_damm_initialize_pool.rs</code></p>"},{"location":"01-instructions/#migrate_meteora_damm_lock_lp_token","title":"<code>migrate_meteora_damm_lock_lp_token</code>","text":"<p>Locks LP tokens in the locker contract.</p> <p>Location: <code>programs/dynamic-bonding-curve/src/instructions/migration/meteora_damm/meteora_damm_lock_lp_token.rs</code></p>"},{"location":"01-instructions/#migrate_meteora_damm_claim_lp_token","title":"<code>migrate_meteora_damm_claim_lp_token</code>","text":"<p>Claims unlocked LP tokens from the locker.</p> <p>Location: <code>programs/dynamic-bonding-curve/src/instructions/migration/meteora_damm/meteora_damm_claim_lp_token.rs</code></p>"},{"location":"01-instructions/#55-damm-v2-migration-2-instructions","title":"5.5 DAMM V2 Migration (2 instructions)","text":""},{"location":"01-instructions/#migration_damm_v2_create_metadata","title":"<code>migration_damm_v2_create_metadata</code>","text":"<p>Creates migration metadata for DAMM V2.</p> <p>Location: <code>programs/dynamic-bonding-curve/src/instructions/migration/dynamic_amm_v2/migration_damm_v2_create_metadata.rs</code></p>"},{"location":"01-instructions/#migration_damm_v2","title":"<code>migration_damm_v2</code>","text":"<p>Initializes the DAMM V2 pool with migrated liquidity.</p> <p>Location: <code>programs/dynamic-bonding-curve/src/instructions/migration/dynamic_amm_v2/migrate_damm_v2_initialize_pool.rs</code></p>"},{"location":"01-instructions/#instruction-flow-chart","title":"Instruction Flow Chart","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    Instruction Lifecycle                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n1. SETUP PHASE\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 create_config        \u2502 (Partner)\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n            \u2502\n            \u25bc\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 initialize_pool_*    \u2502 (Creator)\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n2. TRADING PHASE\n            \u2502\n            \u25bc\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 swap / swap2         \u2502 (Traders)\n   \u2502 (repeated)           \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n            \u2502\n            \u25bc\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 claim_trading_fee    \u2502 (Partner/Creator - optional)\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n3. COMPLETION PHASE\n            \u2502\n            \u25bc\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 Curve Complete       \u2502 (Automatic on last swap)\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n4. MIGRATION PHASE\n            \u2502\n            \u25bc\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 create_locker        \u2502 (Permissionless)\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n            \u2502\n            \u25bc\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 migration_*_create_  \u2502 (Permissionless)\n   \u2502 metadata             \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n            \u2502\n            \u25bc\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 migrate_*            \u2502 (Permissionless)\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n            \u2502\n            \u25bc\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 migrate_*_lock_lp    \u2502 (Permissionless)\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n5. POST-MIGRATION\n            \u2502\n            \u25bc\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 withdraw_surplus     \u2502 (Partner/Creator/Protocol)\n   \u2502 withdraw_migration_  \u2502\n   \u2502 fee                  \u2502\n   \u2502 withdraw_leftover    \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"01-instructions/#access-control-summary","title":"Access Control Summary","text":"Instruction Access create_claim_fee_operator Admin only close_claim_fee_operator Admin only claim_protocol_fee Claim operator only protocol_withdraw_surplus Protocol only create_partner_metadata Anyone create_config Partner (pays rent) claim_trading_fee Partner only partner_withdraw_surplus Partner only initialize_pool_* Creator (pays rent) create_virtual_pool_metadata Creator only claim_creator_trading_fee Creator only creator_withdraw_surplus Creator only transfer_pool_creator Current creator only swap / swap2 Anyone create_locker Permissionless withdraw_leftover Anyone (sends to designated receiver) withdraw_migration_fee Partner or Creator (based on flag) Migration instructions Permissionless (but validated)"},{"location":"02-state-accounts/","title":"State Accounts Reference","text":"<p>This document describes all the on-chain account structures used by the Dynamic Bonding Curve program.</p>"},{"location":"02-state-accounts/#account-overview","title":"Account Overview","text":"Account Size (bytes) Purpose PoolConfig 1040 Pool configuration and curve definition VirtualPool 416 Active pool state and reserves PartnerMetadata Variable Partner information VirtualPoolMetadata Variable Pool metadata ClaimFeeOperator Variable Authorized fee claimer"},{"location":"02-state-accounts/#1-poolconfig","title":"1. PoolConfig","text":"<p>Size: 1040 bytes (zero-copy)</p> <p>PDA Seeds: <code>[\"config\", config_index]</code></p> <p>The PoolConfig contains all immutable configuration for a bonding curve pool.</p>"},{"location":"02-state-accounts/#structure","title":"Structure","text":"<pre><code>pub struct PoolConfig {\n    // Core identifiers\n    pub quote_mint: Pubkey,           // Quote token mint (e.g., USDC)\n    pub fee_claimer: Pubkey,          // Address to receive fees\n    pub leftover_receiver: Pubkey,    // Address for leftover base tokens\n\n    // Fee configuration (128 bytes)\n    pub pool_fees: PoolFeesConfig,\n\n    // Configuration flags\n    pub collect_fee_mode: u8,         // QuoteToken(0) or OutputToken(1)\n    pub migration_option: u8,         // MeteoraDamm(0) or DammV2(1)\n    pub activation_type: u8,          // Slot(0) or Timestamp(1)\n    pub token_decimal: u8,            // Base token decimals\n    pub version: u8,                  // Config version\n    pub token_type: u8,               // SplToken(0) or Token2022(1)\n    pub quote_token_flag: u8,         // Quote token identifier\n    pub partner_locked_lp_percentage: u8,  // % of LP locked for partner\n    pub partner_lp_percentage: u8,         // % of LP for partner\n    pub creator_locked_lp_percentage: u8,  // % of LP locked for creator\n    pub creator_lp_percentage: u8,         // % of LP for creator\n    pub migration_fee_option: u8,     // Migration fee tier\n    pub fixed_token_supply_flag: u8,  // 0=dynamic, 1=fixed supply\n    pub creator_trading_fee_percentage: u8, // Creator's share of trading fees\n    pub token_update_authority: u8,   // Token authority option\n    pub migration_fee_percentage: u8,      // Migration fee %\n    pub creator_migration_fee_percentage: u8, // Creator's migration fee %\n\n    // Pool parameters\n    pub swap_base_amount: u64,        // Base tokens available for swaps\n    pub migration_quote_threshold: u64, // Quote amount to complete curve\n    pub migration_base_threshold: u64,  // Base tokens for migration\n    pub migration_sqrt_price: u128,   // Target price for partial fills\n\n    // Vesting configuration (48 bytes)\n    pub locked_vesting_config: LockedVestingConfig,\n\n    // Token supply (for fixed supply tokens)\n    pub pre_migration_token_supply: u64,\n    pub post_migration_token_supply: u64,\n\n    // Migrated pool configuration\n    pub migrated_collect_fee_mode: u8,\n    pub migrated_dynamic_fee: u8,\n    pub migrated_pool_fee_bps: u16,\n\n    // Price bounds\n    pub sqrt_start_price: u128,       // Minimum price\n\n    // Bonding curve definition (20 points)\n    pub curve: [LiquidityDistributionConfig; 20],\n}\n</code></pre>"},{"location":"02-state-accounts/#sub-structures","title":"Sub-structures","text":""},{"location":"02-state-accounts/#poolfeesconfig-128-bytes","title":"PoolFeesConfig (128 bytes)","text":"<pre><code>pub struct PoolFeesConfig {\n    pub base_fee: BaseFeeConfig,      // 32 bytes\n    pub dynamic_fee: DynamicFeeConfig, // 48 bytes\n    pub protocol_fee_percent: u8,      // Protocol's share of fees (e.g., 20%)\n    pub referral_fee_percent: u8,      // Referral's share of protocol fee\n    // padding: 46 bytes\n}\n</code></pre>"},{"location":"02-state-accounts/#basefeeconfig-32-bytes","title":"BaseFeeConfig (32 bytes)","text":"<pre><code>pub struct BaseFeeConfig {\n    pub cliff_fee_numerator: u64,     // Initial fee (e.g., 10_000_000 = 1%)\n    pub second_factor: u64,            // Period frequency or max duration\n    pub third_factor: u64,             // Reduction factor or reference amount\n    pub first_factor: u16,             // Number of periods or increment BPS\n    pub base_fee_mode: u8,             // FeeSchedulerLinear(0), Exponential(1), RateLimiter(2)\n    // padding: 5 bytes\n}\n</code></pre> <p>Fee Modes: - FeeSchedulerLinear: <code>fee = cliff_fee - (passed_periods * reduction_factor)</code> - FeeSchedulerExponential: <code>fee = cliff_fee * (1 - reduction_factor/10000)^passed_periods</code> - RateLimiter: Anti-sniper protection, increases fee for rapid trading</p>"},{"location":"02-state-accounts/#dynamicfeeconfig-48-bytes","title":"DynamicFeeConfig (48 bytes)","text":"<pre><code>pub struct DynamicFeeConfig {\n    pub initialized: u8,               // 0=disabled, 1=enabled\n    pub max_volatility_accumulator: u32, // Cap for volatility (e.g., 14460000)\n    pub variable_fee_control: u32,     // Fee multiplier\n    pub bin_step: u16,                 // Price bin size (e.g., 1 = 0.01%)\n    pub filter_period: u16,            // Min time between updates (seconds)\n    pub decay_period: u16,             // Volatility decay time (seconds)\n    pub reduction_factor: u16,         // Decay rate (e.g., 5000 = 50%)\n    pub bin_step_u128: u128,           // bin_step &lt;&lt; 64 / 10000\n    // padding: 15 bytes\n}\n</code></pre> <p>Dynamic Fee Calculation: <pre><code>variable_fee = (volatility_accumulator * bin_step)^2 * variable_fee_control / 10^11\ntotal_fee = base_fee + variable_fee\n</code></pre></p>"},{"location":"02-state-accounts/#lockedvestingconfig-48-bytes","title":"LockedVestingConfig (48 bytes)","text":"<pre><code>pub struct LockedVestingConfig {\n    pub amount_per_period: u64,       // Tokens vested each period\n    pub cliff_duration_from_migration_time: u64, // Initial lock time\n    pub frequency: u64,                // Vesting period length\n    pub number_of_period: u64,         // Total vesting periods\n    pub cliff_unlock_amount: u64,      // Tokens unlocked at cliff\n    // padding: 8 bytes\n}\n</code></pre>"},{"location":"02-state-accounts/#liquiditydistributionconfig-32-bytes","title":"LiquidityDistributionConfig (32 bytes)","text":"<pre><code>pub struct LiquidityDistributionConfig {\n    pub sqrt_price: u128,              // Price point (Q64.64 format)\n    pub liquidity: u128,               // Virtual liquidity at this point\n}\n</code></pre> <p>Curve Definition: The bonding curve is defined by up to 20 price points. Each segment between points has: - Start price: <code>curve[i].sqrt_price</code> (or <code>sqrt_start_price</code> for first segment) - End price: <code>curve[i+1].sqrt_price</code> - Liquidity: <code>curve[i+1].liquidity</code></p> <p>Location: <code>programs/dynamic-bonding-curve/src/state/config.rs</code></p>"},{"location":"02-state-accounts/#2-virtualpool","title":"2. VirtualPool","text":"<p>Size: 416 bytes (zero-copy)</p> <p>PDA Seeds: <code>[\"pool\", base_mint, config]</code></p> <p>The VirtualPool represents the active state of a bonding curve pool.</p>"},{"location":"02-state-accounts/#structure_1","title":"Structure","text":"<pre><code>pub struct VirtualPool {\n    // Volatility tracking (64 bytes)\n    pub volatility_tracker: VolatilityTracker,\n\n    // References\n    pub config: Pubkey,               // Associated config\n    pub creator: Pubkey,              // Pool creator\n    pub base_mint: Pubkey,            // Base token mint\n    pub base_vault: Pubkey,           // Base token vault\n    pub quote_vault: Pubkey,          // Quote token vault\n\n    // Reserves\n    pub base_reserve: u64,            // Current base token reserve\n    pub quote_reserve: u64,           // Current quote token reserve\n\n    // Accumulated fees\n    pub protocol_base_fee: u64,       // Protocol fees in base token\n    pub protocol_quote_fee: u64,      // Protocol fees in quote token\n    pub partner_base_fee: u64,        // Partner fees in base token\n    pub partner_quote_fee: u64,       // Partner fees in quote token\n    pub creator_base_fee: u64,        // Creator fees in base token\n    pub creator_quote_fee: u64,       // Creator fees in quote token\n\n    // Current state\n    pub sqrt_price: u128,             // Current price (Q64.64)\n    pub activation_point: u64,        // Slot or timestamp of activation\n\n    // Flags\n    pub pool_type: u8,                // SplToken(0) or Token2022(1)\n    pub is_migrated: u8,              // 0=active, 1=migrated\n    pub is_partner_withdraw_surplus: u8,\n    pub is_protocol_withdraw_surplus: u8,\n    pub migration_progress: u8,       // MigrationProgress enum\n    pub is_withdraw_leftover: u8,\n    pub is_creator_withdraw_surplus: u8,\n    pub migration_fee_withdraw_status: u8, // Bitflags\n\n    // Metrics (32 bytes)\n    pub metrics: PoolMetrics,\n\n    // Timestamps\n    pub finish_curve_timestamp: u64,  // When curve completed\n\n    // Padding: 56 bytes\n}\n</code></pre>"},{"location":"02-state-accounts/#sub-structures_1","title":"Sub-structures","text":""},{"location":"02-state-accounts/#volatilitytracker-64-bytes","title":"VolatilityTracker (64 bytes)","text":"<pre><code>pub struct VolatilityTracker {\n    pub last_update_timestamp: u64,\n    pub sqrt_price_reference: u128,   // Reference price for volatility calc\n    pub volatility_accumulator: u128, // Current volatility\n    pub volatility_reference: u128,   // Decayed volatility baseline\n    // padding: 8 bytes\n}\n</code></pre> <p>Update Logic: 1. On each swap, calculate price change: <code>delta_bin = (upper_price / lower_price - 1) / bin_step</code> 2. Update accumulator: <code>volatility_accumulator = volatility_reference + delta_bin * 10000</code> 3. After filter_period: update reference price and decay volatility</p>"},{"location":"02-state-accounts/#poolmetrics-32-bytes","title":"PoolMetrics (32 bytes)","text":"<pre><code>pub struct PoolMetrics {\n    pub total_protocol_base_fee: u64,\n    pub total_protocol_quote_fee: u64,\n    pub total_trading_base_fee: u64,   // Partner + Creator fees combined\n    pub total_trading_quote_fee: u64,\n}\n</code></pre>"},{"location":"02-state-accounts/#migrationprogress-enum","title":"MigrationProgress (enum)","text":"<pre><code>pub enum MigrationProgress {\n    PreBondingCurve = 0,    // Initial state\n    PostBondingCurve = 1,   // Curve complete, vesting active\n    LockedVesting = 2,      // Ready for migration\n    CreatedPool = 3,        // Migrated to DEX\n}\n</code></pre> <p>State Transitions: <pre><code>PreBondingCurve\n    \u2193 (curve completes with vesting)\nPostBondingCurve\n    \u2193 (vesting complete or no vesting)\nLockedVesting\n    \u2193 (migration executed)\nCreatedPool\n</code></pre></p> <p>Location: <code>programs/dynamic-bonding-curve/src/state/virtual_pool.rs</code></p>"},{"location":"02-state-accounts/#3-partnermetadata","title":"3. PartnerMetadata","text":"<p>Size: Variable (8 + name.len() + uri.len())</p> <p>PDA Seeds: <code>[\"partner_metadata\", partner_pubkey]</code></p>"},{"location":"02-state-accounts/#structure_2","title":"Structure","text":"<pre><code>pub struct PartnerMetadata {\n    pub partner: Pubkey,\n    pub name: String,\n    pub uri: String,\n}\n</code></pre> <p>Purpose: Stores partner information for UI display and tracking.</p> <p>Location: <code>programs/dynamic-bonding-curve/src/state/partner_metadata.rs</code></p>"},{"location":"02-state-accounts/#4-virtualpoolmetadata","title":"4. VirtualPoolMetadata","text":"<p>Size: Variable (8 + name.len() + uri.len())</p> <p>PDA Seeds: <code>[\"virtual_pool_metadata\", pool_pubkey]</code></p>"},{"location":"02-state-accounts/#structure_3","title":"Structure","text":"<pre><code>pub struct VirtualPoolMetadata {\n    pub virtual_pool: Pubkey,\n    pub name: String,\n    pub uri: String,\n}\n</code></pre> <p>Purpose: Additional metadata for pool display.</p> <p>Location: <code>programs/dynamic-bonding-curve/src/state/virtual_pool_metadata.rs</code></p>"},{"location":"02-state-accounts/#5-claimfeeoperator","title":"5. ClaimFeeOperator","text":"<p>Size: Variable (8 + 32)</p> <p>PDA Seeds: <code>[\"cf_operator\", operator_pubkey]</code></p>"},{"location":"02-state-accounts/#structure_4","title":"Structure","text":"<pre><code>pub struct ClaimFeeOperator {\n    pub operator: Pubkey,  // Authorized operator\n}\n</code></pre> <p>Purpose: Authorizes specific addresses to claim protocol fees.</p> <p>Location: <code>programs/dynamic-bonding-curve/src/state/claim_fee_operator.rs</code></p>"},{"location":"02-state-accounts/#account-relationships","title":"Account Relationships","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   PoolConfig    \u2502\u25c4\u2500\u2500\u2500\u2500\u2510\n\u2502                 \u2502     \u2502\n\u2502 \u2022 Curve         \u2502     \u2502\n\u2502 \u2022 Fees          \u2502     \u2502\n\u2502 \u2022 Migration     \u2502     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2502\n                        \u2502 has_one\n                        \u2502\n                  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                  \u2502  VirtualPool    \u2502\n                  \u2502                 \u2502\n                  \u2502 \u2022 Reserves      \u2502\n                  \u2502 \u2022 Price         \u2502\n                  \u2502 \u2022 Fees          \u2502\n                  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                        \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502               \u2502               \u2502\n        \u2502               \u2502               \u2502\n        \u25bc               \u25bc               \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Base Vault  \u2502 \u2502 Quote Vault  \u2502 \u2502   Creator    \u2502\n\u2502  (TokenAcct) \u2502 \u2502 (TokenAcct)  \u2502 \u2502   (Wallet)   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Partner         \u2502       \u2502 VirtualPool     \u2502\n\u2502 Metadata        \u2502       \u2502 Metadata        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"02-state-accounts/#storage-optimization","title":"Storage Optimization","text":"<p>The program uses zero-copy deserialization for large accounts (PoolConfig, VirtualPool) to minimize compute units:</p> <pre><code>#[account(zero_copy)]\npub struct VirtualPool { ... }\n\n// Load as reference (no copying)\nlet pool = ctx.accounts.pool.load()?;      // Read-only\nlet mut pool = ctx.accounts.pool.load_mut()?; // Mutable\n</code></pre>"},{"location":"02-state-accounts/#constants","title":"Constants","text":""},{"location":"02-state-accounts/#price-bounds","title":"Price Bounds","text":"<ul> <li><code>MIN_SQRT_PRICE</code>: 4295048016 (~0.000001 price)</li> <li><code>MAX_SQRT_PRICE</code>: 79226673521066979257578248091 (~1,000,000 price)</li> </ul>"},{"location":"02-state-accounts/#fee-constants","title":"Fee Constants","text":"<ul> <li><code>FEE_DENOMINATOR</code>: 1,000,000,000 (9 decimals precision)</li> <li><code>MAX_FEE_BPS</code>: 9900 (99%)</li> <li><code>MIN_FEE_BPS</code>: 1 (0.01%)</li> <li><code>PROTOCOL_FEE_PERCENT</code>: 20% (of total trading fee)</li> </ul>"},{"location":"02-state-accounts/#other","title":"Other","text":"<ul> <li><code>MAX_CURVE_POINT_CONFIG</code>: 20 price points</li> <li><code>PARTNER_AND_CREATOR_SURPLUS_SHARE</code>: 80% (of surplus)</li> <li><code>SWAP_BUFFER_PERCENTAGE</code>: 25% (extra tokens for buffer)</li> </ul> <p>Location: <code>programs/dynamic-bonding-curve/src/constants.rs</code></p>"},{"location":"02-state-accounts/#account-size-examples","title":"Account Size Examples","text":""},{"location":"02-state-accounts/#typical-poolconfig","title":"Typical PoolConfig","text":"<pre><code>8 (discriminator)\n+ 1040 (struct)\n--------------\n= 1048 bytes\n\u2248 0.0072 SOL rent\n</code></pre>"},{"location":"02-state-accounts/#typical-virtualpool","title":"Typical VirtualPool","text":"<pre><code>8 (discriminator)\n+ 416 (struct)\n--------------\n= 424 bytes\n\u2248 0.0029 SOL rent\n</code></pre>"},{"location":"02-state-accounts/#partnermetadata","title":"PartnerMetadata","text":"<pre><code>8 (discriminator)\n+ 32 (pubkey)\n+ 4 + name.len()\n+ 4 + uri.len()\n--------------\n= Variable (typically ~200 bytes)\n</code></pre>"},{"location":"03-bonding-curve-math/","title":"Bonding Curve Mathematics","text":"<p>This document explains the mathematical foundations of the dynamic bonding curve implementation.</p>"},{"location":"03-bonding-curve-math/#overview","title":"Overview","text":"<p>The program implements a concentrated liquidity AMM with a piecewise constant product formula, similar to Uniswap V3. The bonding curve is divided into price ranges, each with its own liquidity parameter.</p>"},{"location":"03-bonding-curve-math/#core-concepts","title":"Core Concepts","text":""},{"location":"03-bonding-curve-math/#1-sqrt-price-representation","title":"1. Sqrt Price Representation","text":"<p>Prices are stored as the square root of the actual price in a Q64.64 fixed-point format:</p> <pre><code>sqrt_price = \u221a(price_quote_per_base) * 2^64\n</code></pre> <p>Why sqrt price? - More numerically stable for calculations - Symmetric price movements (1% up = 1% down) - Avoids precision loss in extreme price ranges</p> <p>Example: <pre><code>Actual price: 1 USDC per TOKEN\nsqrt_price = \u221a1 * 2^64 = 18,446,744,073,709,551,616\n\nActual price: 100 USDC per TOKEN\nsqrt_price = \u221a100 * 2^64 = 184,467,440,737,095,516,160\n</code></pre></p> <p>Price Bounds: <pre><code>MIN_SQRT_PRICE: u128 = 4,295,048,016              // ~$0.000001 per token\nMAX_SQRT_PRICE: u128 = 79,226,673,521,066,979,... // ~$1,000,000 per token\n</code></pre></p> <p>Location: <code>programs/dynamic-bonding-curve/src/constants.rs:3-4</code></p>"},{"location":"03-bonding-curve-math/#2-liquidity","title":"2. Liquidity","text":"<p>Liquidity <code>L</code> is a constant that determines the relationship between price and reserves:</p> <pre><code>L = \u221a(x * y)\n</code></pre> <p>Where: - <code>x</code> = base token reserve - <code>y</code> = quote token reserve</p> <p>For a price range <code>[P_lower, P_upper]</code> with liquidity <code>L</code>: <pre><code>L = constant for all prices in this range\n</code></pre></p>"},{"location":"03-bonding-curve-math/#bonding-curve-definition","title":"Bonding Curve Definition","text":""},{"location":"03-bonding-curve-math/#piecewise-constant-liquidity","title":"Piecewise Constant Liquidity","text":"<p>The curve is defined by up to 20 price points, creating up to 20 segments:</p> <pre><code>pub struct LiquidityDistributionConfig {\n    pub sqrt_price: u128,    // Price point\n    pub liquidity: u128,     // Liquidity for segment ending at this price\n}\n\npub curve: [LiquidityDistributionConfig; 20]\n</code></pre> <p>Curve Structure: <pre><code>Segment 0: [sqrt_start_price, curve[0].sqrt_price] \u2192 liquidity = curve[0].liquidity\nSegment 1: [curve[0].sqrt_price, curve[1].sqrt_price] \u2192 liquidity = curve[1].liquidity\n...\nSegment i: [curve[i-1].sqrt_price, curve[i].sqrt_price] \u2192 liquidity = curve[i].liquidity\n</code></pre></p> <p>Visual Example: <pre><code>Price\n  \u2502\n  \u2502                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  \u2502                   \u2500\u2518\n  \u2502              \u250c\u2500\u2500\u2500\u2518               Segment 2: L\u2082\n  \u2502             \u2500\u2518\n  \u2502        \u250c\u2500\u2500\u2500\u2518\n  \u2502       \u2500\u2518                         Segment 1: L\u2081\n  \u2502  \u250c\u2500\u2500\u2500\u2518\n  \u2502 \u2500\u2518                               Segment 0: L\u2080\n  \u2502\n  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba Reserves\n    start  P\u2080    P\u2081    P\u2082    P\u2083\n</code></pre></p> <p>Location: <code>programs/dynamic-bonding-curve/src/state/config.rs:559-564</code></p>"},{"location":"03-bonding-curve-math/#core-formulas","title":"Core Formulas","text":""},{"location":"03-bonding-curve-math/#1-constant-product-formula-per-segment","title":"1. Constant Product Formula (per segment)","text":"<p>Within each liquidity segment:</p> <pre><code>x * \u221aP = L     (for base token)\ny / \u221aP = L     (for quote token)\n</code></pre> <p>Where: - <code>x</code> = base token amount - <code>y</code> = quote token amount - <code>P</code> = price (quote per base) - <code>L</code> = liquidity constant</p> <p>This gives us: <pre><code>x * y = L\u00b2\n</code></pre></p>"},{"location":"03-bonding-curve-math/#2-token-amount-calculations","title":"2. Token Amount Calculations","text":""},{"location":"03-bonding-curve-math/#base-token-amount-x","title":"Base Token Amount (\u0394x)","text":"<p>For a price range <code>[\u221aP_lower, \u221aP_upper]</code>:</p> <pre><code>\u0394x = L * (\u221aP_upper - \u221aP_lower) / (\u221aP_upper * \u221aP_lower)\n   = L * (1/\u221aP_lower - 1/\u221aP_upper)\n</code></pre> <p>Implementation: <pre><code>pub fn get_delta_amount_base_unsigned(\n    lower_sqrt_price: u128,\n    upper_sqrt_price: u128,\n    liquidity: u128,\n    round: Rounding,\n) -&gt; Result&lt;u64&gt; {\n    let numerator_1 = U256::from(liquidity);\n    let numerator_2 = U256::from(upper_sqrt_price - lower_sqrt_price);\n    let denominator = U256::from(lower_sqrt_price) * U256::from(upper_sqrt_price);\n\n    mul_div_u256(numerator_1, numerator_2, denominator, round)\n}\n</code></pre></p> <p>Location: <code>programs/dynamic-bonding-curve/src/curve.rs:62-72</code></p>"},{"location":"03-bonding-curve-math/#quote-token-amount-y","title":"Quote Token Amount (\u0394y)","text":"<p>For a price range <code>[\u221aP_lower, \u221aP_upper]</code>:</p> <pre><code>\u0394y = L * (\u221aP_upper - \u221aP_lower)\n</code></pre> <p>Implementation: <pre><code>pub fn get_delta_amount_quote_unsigned(\n    lower_sqrt_price: u128,\n    upper_sqrt_price: u128,\n    liquidity: u128,\n    round: Rounding,\n) -&gt; Result&lt;u64&gt; {\n    let liquidity = U256::from(liquidity);\n    let delta_sqrt_price = U256::from(upper_sqrt_price - lower_sqrt_price);\n    let prod = liquidity * delta_sqrt_price;\n\n    // Divide by 2^128 (Q64.64 * Q64.64 = Q128.128)\n    match round {\n        Rounding::Up =&gt; prod.div_ceil(2^128),\n        Rounding::Down =&gt; prod &gt;&gt; 128,\n    }\n}\n</code></pre></p> <p>Location: <code>programs/dynamic-bonding-curve/src/curve.rs:109-158</code></p>"},{"location":"03-bonding-curve-math/#3-next-price-calculations","title":"3. Next Price Calculations","text":""},{"location":"03-bonding-curve-math/#from-input-amount","title":"From Input Amount","text":"<p>When adding tokens, find the new price:</p> <p>Base Token Input (selling base for quote): <pre><code>\u221aP' = \u221aP * L / (L + \u0394x * \u221aP)\n</code></pre></p> <p>Quote Token Input (buying base with quote): <pre><code>\u221aP' = \u221aP + \u0394y / L\n</code></pre></p> <p>Implementation: <pre><code>pub fn get_next_sqrt_price_from_input(\n    sqrt_price: u128,\n    liquidity: u128,\n    amount_in: u64,\n    base_for_quote: bool,  // true if selling base\n) -&gt; Result&lt;u128&gt; {\n    if base_for_quote {\n        // \u221aP' = \u221aP * L / (L + \u0394x * \u221aP)\n        get_next_sqrt_price_from_base_amount_in_rounding_up(...)\n    } else {\n        // \u221aP' = \u221aP + \u0394y / L\n        get_next_sqrt_price_from_quote_amount_in_rounding_down(...)\n    }\n}\n</code></pre></p> <p>Location: <code>programs/dynamic-bonding-curve/src/curve.rs:162-177</code></p>"},{"location":"03-bonding-curve-math/#from-output-amount","title":"From Output Amount","text":"<p>When removing tokens, find the new price:</p> <p>Base Token Output (buying base): <pre><code>\u221aP' = \u221aP * L / (L - \u0394x * \u221aP)\n</code></pre></p> <p>Quote Token Output (selling base): <pre><code>\u221aP' = \u221aP - \u0394y / L\n</code></pre></p> <p>Implementation: <pre><code>pub fn get_next_sqrt_price_from_output(\n    sqrt_price: u128,\n    liquidity: u128,\n    amount_out: u64,\n    base_for_quote: bool,\n) -&gt; Result&lt;u128&gt; {\n    if base_for_quote {\n        // \u221aP' = \u221aP - \u0394y / L\n        get_next_sqrt_price_from_quote_amount_out_rounding_down(...)\n    } else {\n        // \u221aP' = \u221aP * L / (L - \u0394x * \u221aP)\n        get_next_sqrt_price_from_base_amount_out_rounding_up(...)\n    }\n}\n</code></pre></p> <p>Location: <code>programs/dynamic-bonding-curve/src/curve.rs:179-193</code></p>"},{"location":"03-bonding-curve-math/#swap-calculations","title":"Swap Calculations","text":""},{"location":"03-bonding-curve-math/#exact-input-swap-quote-base","title":"Exact Input Swap (Quote \u2192 Base)","text":"<p>Goal: Given quote token input, calculate base token output</p> <p>Algorithm: <pre><code>1. Start at current price P\u2080\n2. For each liquidity segment (ascending):\n   a. Calculate max quote tokens to reach segment end price\n   b. If remaining input &lt; max:\n      - Calculate new price within segment\n      - Calculate base token output\n      - Done\n   c. Else:\n      - Move to segment end price\n      - Calculate base token output for this segment\n      - Subtract used input\n      - Continue to next segment\n3. Return total base output and final price\n</code></pre></p> <p>Implementation: <pre><code>fn calculate_quote_to_base_from_amount_in(\n    &amp;self,\n    config: &amp;PoolConfig,\n    amount_in: u64,\n    stop_sqrt_price: u128,\n) -&gt; Result&lt;SwapAmountFromInput&gt; {\n    let mut total_output_amount = 0u64;\n    let mut current_sqrt_price = self.sqrt_price;\n    let mut amount_left = amount_in;\n\n    for i in 0..config.curve.len() {\n        if config.curve[i].sqrt_price == 0 { break; }\n\n        let reference_sqrt_price = stop_sqrt_price.min(config.curve[i].sqrt_price);\n        if reference_sqrt_price &gt; current_sqrt_price {\n            // Calculate max input to reach reference price\n            let max_amount_in = get_delta_amount_quote_unsigned_256(\n                current_sqrt_price,\n                reference_sqrt_price,\n                config.curve[i].liquidity,\n                Rounding::Up,\n            )?;\n\n            if U256::from(amount_left) &lt; max_amount_in {\n                // Can't reach reference price, calculate within segment\n                let next_sqrt_price = get_next_sqrt_price_from_input(\n                    current_sqrt_price,\n                    config.curve[i].liquidity,\n                    amount_left,\n                    false,  // quote to base\n                )?;\n\n                let output_amount = get_delta_amount_base_unsigned(\n                    current_sqrt_price,\n                    next_sqrt_price,\n                    config.curve[i].liquidity,\n                    Rounding::Down,\n                )?;\n\n                total_output_amount += output_amount;\n                current_sqrt_price = next_sqrt_price;\n                amount_left = 0;\n                break;\n            } else {\n                // Move to reference price\n                let next_sqrt_price = reference_sqrt_price;\n                let output_amount = get_delta_amount_base_unsigned(\n                    current_sqrt_price,\n                    next_sqrt_price,\n                    config.curve[i].liquidity,\n                    Rounding::Down,\n                )?;\n\n                total_output_amount += output_amount;\n                current_sqrt_price = next_sqrt_price;\n                amount_left -= max_amount_in.try_into()?;\n\n                if next_sqrt_price == stop_sqrt_price { break; }\n            }\n        }\n    }\n\n    Ok(SwapAmountFromInput {\n        amount_left,\n        output_amount: total_output_amount,\n        next_sqrt_price: current_sqrt_price,\n    })\n}\n</code></pre></p> <p>Location: <code>programs/dynamic-bonding-curve/src/state/virtual_pool.rs:740-818</code></p>"},{"location":"03-bonding-curve-math/#exact-output-swap-quote-base","title":"Exact Output Swap (Quote \u2192 Base)","text":"<p>Goal: Given desired base token output, calculate required quote token input</p> <p>Algorithm: <pre><code>1. Start at current price P\u2080\n2. For each liquidity segment (ascending):\n   a. Calculate max base tokens available to segment end price\n   b. If remaining output &lt; max:\n      - Calculate new price within segment\n      - Calculate required quote input\n      - Done\n   c. Else:\n      - Move to segment end price\n      - Calculate quote input for this segment\n      - Subtract provided output\n      - Continue to next segment\n3. Return total quote input and final price\n</code></pre></p> <p>Implementation: <pre><code>pub fn calculate_quote_to_base_from_amount_out(\n    &amp;self,\n    config: &amp;PoolConfig,\n    amount_out: u64,\n) -&gt; Result&lt;SwapAmountFromOutput&gt; {\n    let mut total_input_amount = 0u64;\n    let mut amount_left = amount_out;\n    let mut current_sqrt_price = self.sqrt_price;\n\n    for i in 0..config.curve.len() {\n        if config.curve[i].sqrt_price == 0 { break; }\n\n        if config.curve[i].sqrt_price &gt; current_sqrt_price {\n            // Max base tokens to this price point\n            let max_amount_out = get_delta_amount_base_unsigned_256(\n                current_sqrt_price,\n                config.curve[i].sqrt_price,\n                config.curve[i].liquidity,\n                Rounding::Down,\n            )?;\n\n            if U256::from(amount_left) &lt; max_amount_out {\n                // Find price for exact output\n                let next_sqrt_price = get_next_sqrt_price_from_output(\n                    current_sqrt_price,\n                    config.curve[i].liquidity,\n                    amount_left,\n                    false,  // false = base output\n                )?;\n\n                let input_amount = get_delta_amount_quote_unsigned(\n                    current_sqrt_price,\n                    next_sqrt_price,\n                    config.curve[i].liquidity,\n                    Rounding::Up,\n                )?;\n\n                total_input_amount += input_amount;\n                current_sqrt_price = next_sqrt_price;\n                amount_left = 0;\n                break;\n            } else {\n                // Use entire segment\n                let next_sqrt_price = config.curve[i].sqrt_price;\n                let input_amount = get_delta_amount_quote_unsigned(\n                    current_sqrt_price,\n                    next_sqrt_price,\n                    config.curve[i].liquidity,\n                    Rounding::Up,\n                )?;\n\n                total_input_amount += input_amount;\n                current_sqrt_price = next_sqrt_price;\n                amount_left -= max_amount_out.try_into()?;\n            }\n        }\n    }\n\n    require!(amount_left == 0, PoolError::AmountLeftIsNotZero);\n\n    Ok(SwapAmountFromOutput {\n        amount_in: total_input_amount,\n        next_sqrt_price: current_sqrt_price,\n    })\n}\n</code></pre></p> <p>Location: <code>programs/dynamic-bonding-curve/src/state/virtual_pool.rs:378-442</code></p>"},{"location":"03-bonding-curve-math/#rounding","title":"Rounding","text":"<p>Proper rounding is critical for preventing value extraction:</p>"},{"location":"03-bonding-curve-math/#rounding-rules","title":"Rounding Rules","text":"<pre><code>pub enum Rounding {\n    Up,    // Round in favor of the pool\n    Down,  // Round in favor of the user\n}\n</code></pre> <p>Principles: 1. Input amounts: Round UP (user pays more) 2. Output amounts: Round DOWN (user receives less) 3. Fees: Round UP (pool receives more)</p> <p>Examples: <pre><code>// When calculating required input (user pays)\nget_delta_amount_quote_unsigned(..., Rounding::Up)\n\n// When calculating output (user receives)\nget_delta_amount_base_unsigned(..., Rounding::Down)\n\n// When calculating next price from input\nget_next_sqrt_price_from_base_amount_in_rounding_up(...)  // Round price UP\n</code></pre></p> <p>Location: <code>programs/dynamic-bonding-curve/src/math/u128x128_math.rs</code></p>"},{"location":"03-bonding-curve-math/#example-calculation","title":"Example Calculation","text":""},{"location":"03-bonding-curve-math/#setup","title":"Setup","text":"<pre><code>Current price: \u221aP = 2^64 (P = 1 USDC per TOKEN)\nLiquidity: L = 10,000 * 2^64\nInput: 100 USDC\n</code></pre>"},{"location":"03-bonding-curve-math/#step-1-calculate-new-price","title":"Step 1: Calculate new price","text":"<pre><code>\u0394y = 100 * 2^128 (convert to Q64.64 * Q64.64)\n\u221aP' = \u221aP + \u0394y / L\n    = 2^64 + (100 * 2^128) / (10,000 * 2^64)\n    = 2^64 + 100 * 2^64 / 10,000\n    = 2^64 * (1 + 0.01)\n    = 2^64 * 1.01\n</code></pre>"},{"location":"03-bonding-curve-math/#step-2-calculate-base-output","title":"Step 2: Calculate base output","text":"<pre><code>\u0394x = L * (1/\u221aP - 1/\u221aP')\n   = L * (1/(2^64) - 1/(2^64 * 1.01))\n   = L * (1 - 1/1.01) / 2^64\n   \u2248 99 TOKEN (rounded down)\n</code></pre>"},{"location":"03-bonding-curve-math/#result","title":"Result","text":"<pre><code>Input:  100 USDC\nOutput: 99 TOKEN\nPrice change: 1.00 \u2192 1.01 USDC per TOKEN (+1%)\n</code></pre>"},{"location":"03-bonding-curve-math/#numerical-precision","title":"Numerical Precision","text":""},{"location":"03-bonding-curve-math/#fixed-point-arithmetic","title":"Fixed-Point Arithmetic","text":"<p>All calculations use Q64.64 fixed-point format: <pre><code>value = integer_part * 2^64 + fractional_part\n</code></pre></p> <p>Range: - Integer part: 0 to 2^64-1 - Fractional part: 0 to 2^64-1 - Precision: ~18 decimal places</p>"},{"location":"03-bonding-curve-math/#overflow-protection","title":"Overflow Protection","text":"<p>The program uses <code>U256</code> for intermediate calculations:</p> <pre><code>use ruint::aliases::U256;\n\n// Example: Multiplying two u128 values\nlet a = U256::from(value1);\nlet b = U256::from(value2);\nlet product = a.safe_mul(b)?;  // Can't overflow U256\nlet result = product.try_into()?;  // Checked conversion back\n</code></pre> <p>Location: <code>programs/dynamic-bonding-curve/src/math/safe_math.rs</code></p>"},{"location":"03-bonding-curve-math/#constants-and-limits","title":"Constants and Limits","text":"<pre><code>// Curve configuration\npub const MAX_CURVE_POINT_CONFIG: usize = 20;\n\n// Price bounds (Q64.64 format)\npub const MIN_SQRT_PRICE: u128 = 4_295_048_016;\npub const MAX_SQRT_PRICE: u128 = 79_226_673_521_066_979_257_578_248_091;\n\n// Fixed-point precision\npub const RESOLUTION: u8 = 64;\npub const ONE_Q64: u128 = 1u128 &lt;&lt; 64;\n</code></pre> <p>Location: <code>programs/dynamic-bonding-curve/src/constants.rs</code></p>"},{"location":"03-bonding-curve-math/#further-reading","title":"Further Reading","text":"<ul> <li>Uniswap V3 Whitepaper - Similar concentrated liquidity design</li> <li>Q64.64 Fixed-Point - Number format explanation</li> </ul>"},{"location":"04-fee-system/","title":"Fee System","text":"<p>This document explains the comprehensive fee system including base fees, dynamic fees, fee distribution, and anti-sniper protection.</p>"},{"location":"04-fee-system/#overview","title":"Overview","text":"<p>The fee system combines three components: 1. Base Fee: Time-based fee that decreases over time 2. Dynamic Fee: Volatility-based fee that increases during high trading activity 3. Rate Limiter: Anti-sniper protection that penalizes rapid trading</p> <pre><code>Total Trading Fee = Base Fee + Dynamic Fee\n</code></pre> <p>The total fee is then split between protocol, partner, creator, and optionally referral.</p>"},{"location":"04-fee-system/#1-base-fee","title":"1. Base Fee","text":"<p>Base fees decrease over time according to a schedule, making it cheaper to trade as the pool matures.</p>"},{"location":"04-fee-system/#fee-modes","title":"Fee Modes","text":""},{"location":"04-fee-system/#11-linear-fee-scheduler","title":"1.1 Linear Fee Scheduler","text":"<p>Fees decrease linearly over time:</p> <pre><code>fee(t) = cliff_fee - (passed_periods \u00d7 reduction_factor)\n</code></pre> <p>Configuration: <pre><code>BaseFeeConfig {\n    cliff_fee_numerator: 10_000_000,    // 1% initial fee\n    first_factor: 100,                  // number_of_periods\n    second_factor: 60,                  // period_frequency (seconds)\n    third_factor: 100_000,              // reduction_factor per period\n    base_fee_mode: 0,                   // FeeSchedulerLinear\n}\n</code></pre></p> <p>Example: <pre><code>t = 0s:    fee = 10,000,000 (1.0%)\nt = 60s:   fee = 10,000,000 - 1 \u00d7 100,000 = 9,900,000 (0.99%)\nt = 120s:  fee = 10,000,000 - 2 \u00d7 100,000 = 9,800,000 (0.98%)\n...\nt = 6000s: fee = 10,000,000 - 100 \u00d7 100,000 = 0 (0%)\n</code></pre></p> <p>Location: <code>programs/dynamic-bonding-curve/src/base_fee/fee_scheduler.rs</code></p>"},{"location":"04-fee-system/#12-exponential-fee-scheduler","title":"1.2 Exponential Fee Scheduler","text":"<p>Fees decrease exponentially over time:</p> <pre><code>fee(t) = cliff_fee \u00d7 (1 - reduction_factor/10000)^passed_periods\n</code></pre> <p>Configuration: <pre><code>BaseFeeConfig {\n    cliff_fee_numerator: 10_000_000,    // 1% initial fee\n    first_factor: 100,                  // number_of_periods\n    second_factor: 60,                  // period_frequency (seconds)\n    third_factor: 500,                  // reduction_factor (5% per period)\n    base_fee_mode: 1,                   // FeeSchedulerExponential\n}\n</code></pre></p> <p>Example: <pre><code>t = 0s:    fee = 10,000,000 \u00d7 (1)^0 = 10,000,000 (1.0%)\nt = 60s:   fee = 10,000,000 \u00d7 (0.95)^1 = 9,500,000 (0.95%)\nt = 120s:  fee = 10,000,000 \u00d7 (0.95)^2 = 9,025,000 (0.9025%)\n...\nt = 6000s: fee = 10,000,000 \u00d7 (0.95)^100 \u2248 59,000 (0.0059%)\n</code></pre></p> <p>Location: <code>programs/dynamic-bonding-curve/src/base_fee/fee_scheduler.rs</code></p>"},{"location":"04-fee-system/#13-rate-limiter-anti-sniper","title":"1.3 Rate Limiter (Anti-Sniper)","text":"<p>Increases fees for traders who execute multiple swaps within a short time period:</p> <pre><code>Effective fee = cliff_fee + (traded_amount / reference_amount) \u00d7 fee_increment \u00d7 periods_active\n</code></pre> <p>Configuration: <pre><code>BaseFeeConfig {\n    cliff_fee_numerator: 1_000_000,     // 0.1% base fee\n    first_factor: 100,                  // fee_increment_bps (1% per reference amount)\n    second_factor: 600,                 // max_limiter_duration (10 minutes)\n    third_factor: 1000_000_000,         // reference_amount (1000 tokens w/ 6 decimals)\n    base_fee_mode: 2,                   // RateLimiter\n}\n</code></pre></p> <p>How it works: 1. Track cumulative trade volume since activation 2. Calculate penalty: <code>(volume / reference_amount) \u00d7 fee_increment_bps</code> 3. Apply penalty only during first <code>max_limiter_duration</code> seconds 4. After duration expires, fee returns to <code>cliff_fee_numerator</code></p> <p>Example: <pre><code>User buys 5000 tokens within first 10 minutes:\npenalty_bps = (5000 / 1000) \u00d7 100 = 500 bps = 5%\neffective_fee = 0.1% + 5% = 5.1%\n\nRegular user buys 100 tokens:\npenalty_bps = (100 / 1000) \u00d7 100 = 10 bps = 0.1%\neffective_fee = 0.1% + 0.1% = 0.2%\n</code></pre></p> <p>Anti-Sniper Protection: This prevents bots from buying large amounts immediately after pool creation.</p> <p>Location: <code>programs/dynamic-bonding-curve/src/base_fee/fee_rate_limiter.rs</code></p>"},{"location":"04-fee-system/#2-dynamic-fee","title":"2. Dynamic Fee","text":"<p>Dynamic fees increase during periods of high volatility to protect liquidity providers and discourage front-running.</p>"},{"location":"04-fee-system/#volatility-tracking","title":"Volatility Tracking","text":"<p>The program tracks price volatility using a volatility accumulator:</p> <pre><code>pub struct VolatilityTracker {\n    pub last_update_timestamp: u64,\n    pub sqrt_price_reference: u128,     // Reference price\n    pub volatility_accumulator: u128,   // Current volatility\n    pub volatility_reference: u128,     // Decayed baseline\n}\n</code></pre>"},{"location":"04-fee-system/#update-logic","title":"Update Logic","text":"<p>On each swap:</p> <ol> <li> <p>Before Swap (update references): <pre><code>elapsed = current_timestamp - last_update_timestamp\n\nif elapsed &gt;= filter_period {\n    // Update reference price\n    sqrt_price_reference = current_price\n\n    if elapsed &lt; decay_period {\n        // Decay time window\n        volatility_reference = volatility_accumulator \u00d7 reduction_factor / 10000\n    } else {\n        // Outside decay window, reset\n        volatility_reference = 0\n    }\n}\n</code></pre></p> </li> <li> <p>After Swap (update accumulator): <pre><code>// Calculate price change in bins\ndelta_bin = (upper_price / lower_price - 1) / bin_step \u00d7 2\n\n// Update accumulator\nvolatility_accumulator = volatility_reference + delta_bin \u00d7 10000\n\n// Cap at maximum\nvolatility_accumulator = min(volatility_accumulator, max_volatility_accumulator)\n</code></pre></p> </li> </ol> <p>Location: <code>programs/dynamic-bonding-curve/src/state/fee.rs:58-108</code></p>"},{"location":"04-fee-system/#fee-calculation","title":"Fee Calculation","text":"<pre><code>variable_fee = (volatility_accumulator \u00d7 bin_step)^2 \u00d7 variable_fee_control / 10^11\n</code></pre> <p>Configuration: <pre><code>DynamicFeeConfig {\n    initialized: 1,                     // 1 = enabled\n    max_volatility_accumulator: 14_460_000,\n    variable_fee_control: 100_000,\n    bin_step: 1,                        // 0.01% price bins\n    filter_period: 10,                  // 10 seconds\n    decay_period: 120,                  // 2 minutes\n    reduction_factor: 5000,             // 50% decay\n    bin_step_u128: 1_844_674_407_370_955, // bin_step &lt;&lt; 64 / 10000\n}\n</code></pre></p> <p>Example: <pre><code>volatility_accumulator = 1,000,000 (moderate activity)\nbin_step = 1\n\nvariable_fee = (1,000,000 \u00d7 1)^2 \u00d7 100,000 / 10^11\n             = 10^12 \u00d7 100,000 / 10^11\n             = 10,000,000\n             = 1%\n</code></pre></p> <p>Location: <code>programs/dynamic-bonding-curve/src/state/config.rs:299-322</code></p>"},{"location":"04-fee-system/#3-fee-collection-modes","title":"3. Fee Collection Modes","text":"<p>Fees can be collected in different tokens depending on the pool configuration:</p>"},{"location":"04-fee-system/#collectfeemode","title":"CollectFeeMode","text":"<pre><code>pub enum CollectFeeMode {\n    QuoteToken = 0,   // Always collect fees in quote token\n    OutputToken = 1,  // Collect fees in output token of swap\n}\n</code></pre>"},{"location":"04-fee-system/#fee-application","title":"Fee Application","text":"<p>The mode affects whether fees are taken from input or output:</p> <pre><code>pub struct FeeMode {\n    pub fees_on_input: bool,       // Take fees from input amount?\n    pub fees_on_base_token: bool,  // Are fees in base token?\n    pub has_referral: bool,         // Is there a referral?\n}\n</code></pre> <p>Logic: <pre><code>match (collect_fee_mode, trade_direction) {\n    (QuoteToken, BaseToQuote) =&gt; {\n        fees_on_input = false     // Take from output (quote)\n        fees_on_base_token = false\n    }\n    (QuoteToken, QuoteToBase) =&gt; {\n        fees_on_input = true      // Take from input (quote)\n        fees_on_base_token = false\n    }\n    (OutputToken, BaseToQuote) =&gt; {\n        fees_on_input = false     // Take from output (quote)\n        fees_on_base_token = false\n    }\n    (OutputToken, QuoteToBase) =&gt; {\n        fees_on_input = false     // Take from output (base)\n        fees_on_base_token = true\n    }\n}\n</code></pre></p> <p>Location: <code>programs/dynamic-bonding-curve/src/state/fee.rs:117-142</code></p>"},{"location":"04-fee-system/#4-fee-distribution","title":"4. Fee Distribution","text":"<p>Trading fees are split between multiple parties:</p>"},{"location":"04-fee-system/#primary-split","title":"Primary Split","text":"<pre><code>Total Trading Fee\n    \u2502\n    \u251c\u2500\u25ba Protocol Fee (e.g., 20% of total)\n    \u2502       \u2502\n    \u2502       \u251c\u2500\u25ba Protocol (80%)\n    \u2502       \u2514\u2500\u25ba Referral (20%, optional)\n    \u2502\n    \u2514\u2500\u25ba Trading Fee (e.g., 80% of total)\n            \u2502\n            \u251c\u2500\u25ba Partner Fee (based on creator_trading_fee_percentage)\n            \u2514\u2500\u25ba Creator Fee (remaining)\n</code></pre>"},{"location":"04-fee-system/#configuration","title":"Configuration","text":"<pre><code>pub struct PoolFeesConfig {\n    pub protocol_fee_percent: u8,      // e.g., 20\n    pub referral_fee_percent: u8,      // e.g., 20\n    // ...\n}\n\npub struct PoolConfig {\n    pub creator_trading_fee_percentage: u8,  // e.g., 50\n    // ...\n}\n</code></pre>"},{"location":"04-fee-system/#calculation","title":"Calculation","text":"<p>Step 1: Split total fee into protocol and trading: <pre><code>protocol_fee = total_fee \u00d7 protocol_fee_percent / 100\ntrading_fee = total_fee - protocol_fee\n</code></pre></p> <p>Step 2: Split protocol fee with referral (if present): <pre><code>if has_referral {\n    referral_fee = protocol_fee \u00d7 referral_fee_percent / 100\n    protocol_fee = protocol_fee - referral_fee\n}\n</code></pre></p> <p>Step 3: Split trading fee between partner and creator: <pre><code>creator_fee = trading_fee \u00d7 creator_trading_fee_percentage / 100\npartner_fee = trading_fee - creator_fee\n</code></pre></p> <p>Location: <code>programs/dynamic-bonding-curve/src/state/config.rs:196-221</code></p>"},{"location":"04-fee-system/#example","title":"Example","text":"<pre><code>Total trading fee: 1000 tokens\nprotocol_fee_percent: 20\nreferral_fee_percent: 20\ncreator_trading_fee_percentage: 50\nhas_referral: true\n\nCalculation:\nprotocol_fee = 1000 \u00d7 20 / 100 = 200\nreferral_fee = 200 \u00d7 20 / 100 = 40\nprotocol_fee = 200 - 40 = 160\ntrading_fee = 1000 - 200 = 800\ncreator_fee = 800 \u00d7 50 / 100 = 400\npartner_fee = 800 - 400 = 400\n\nResult:\n- Protocol: 160 tokens (16%)\n- Referral: 40 tokens (4%)\n- Creator:  400 tokens (40%)\n- Partner:  400 tokens (40%)\n</code></pre>"},{"location":"04-fee-system/#5-fee-accumulation","title":"5. Fee Accumulation","text":"<p>Fees accumulate in the pool and can be claimed separately:</p>"},{"location":"04-fee-system/#pool-state","title":"Pool State","text":"<pre><code>pub struct VirtualPool {\n    // Accumulated fees\n    pub protocol_base_fee: u64,\n    pub protocol_quote_fee: u64,\n    pub partner_base_fee: u64,\n    pub partner_quote_fee: u64,\n    pub creator_base_fee: u64,\n    pub creator_quote_fee: u64,\n    // ...\n}\n</code></pre>"},{"location":"04-fee-system/#fee-updates-on-swap","title":"Fee Updates (on swap)","text":"<pre><code>fn apply_swap_result(...) {\n    let PartnerAndCreatorSplitFee { partner_fee, creator_fee } =\n        config.split_partner_and_creator_fee(trading_fee)?;\n\n    if fee_mode.fees_on_base_token {\n        self.partner_base_fee += partner_fee;\n        self.protocol_base_fee += protocol_fee;\n        self.creator_base_fee += creator_fee;\n    } else {\n        self.partner_quote_fee += partner_fee;\n        self.protocol_quote_fee += protocol_fee;\n        self.creator_quote_fee += creator_fee;\n    }\n}\n</code></pre> <p>Location: <code>programs/dynamic-bonding-curve/src/state/virtual_pool.rs:820-878</code></p>"},{"location":"04-fee-system/#6-fee-constants","title":"6. Fee Constants","text":"<pre><code>// Fee denominator (9 decimals of precision)\npub const FEE_DENOMINATOR: u64 = 1_000_000_000;\n\n// Fee bounds\npub const MAX_FEE_BPS: u64 = 9900;        // 99%\npub const MAX_FEE_NUMERATOR: u64 = 990_000_000;\n\npub const MIN_FEE_BPS: u64 = 1;           // 0.01%\npub const MIN_FEE_NUMERATOR: u64 = 100_000;\n\n// Default percentages\npub const PROTOCOL_FEE_PERCENT: u8 = 20;  // 20% of total\npub const HOST_FEE_PERCENT: u8 = 20;      // 20% of protocol fee\n</code></pre> <p>Fee Numerator Format: <pre><code>Actual fee = fee_numerator / FEE_DENOMINATOR\n\nExamples:\n1_000_000 = 0.1%\n10_000_000 = 1%\n100_000_000 = 10%\n990_000_000 = 99%\n</code></pre></p> <p>Location: <code>programs/dynamic-bonding-curve/src/constants.rs:58-86</code></p>"},{"location":"04-fee-system/#7-fee-claiming","title":"7. Fee Claiming","text":""},{"location":"04-fee-system/#protocol-fees","title":"Protocol Fees","text":"<p>Instruction: <code>claim_protocol_fee</code></p> <p>Access: Claim operator only</p> <pre><code>let (base_amount, quote_amount) = pool.claim_protocol_fee();\npool.protocol_base_fee = 0;\npool.protocol_quote_fee = 0;\n</code></pre>"},{"location":"04-fee-system/#partner-fees","title":"Partner Fees","text":"<p>Instruction: <code>claim_trading_fee</code></p> <p>Access: Partner (config fee_claimer)</p> <pre><code>let (base_amount, quote_amount) = pool.claim_partner_trading_fee(\n    max_base_amount,\n    max_quote_amount,\n)?;\npool.partner_base_fee -= base_amount;\npool.partner_quote_fee -= quote_amount;\n</code></pre>"},{"location":"04-fee-system/#creator-fees","title":"Creator Fees","text":"<p>Instruction: <code>claim_creator_trading_fee</code></p> <p>Access: Creator only</p> <pre><code>let (base_amount, quote_amount) = pool.claim_creator_trading_fee(\n    max_base_amount,\n    max_quote_amount,\n)?;\npool.creator_base_fee -= base_amount;\npool.creator_quote_fee -= quote_amount;\n</code></pre> <p>Location: <code>programs/dynamic-bonding-curve/src/state/virtual_pool.rs:915-945</code></p>"},{"location":"04-fee-system/#8-migration-fees","title":"8. Migration Fees","text":"<p>When the curve completes and migrates to a DEX, an additional fee can be charged:</p>"},{"location":"04-fee-system/#configuration_1","title":"Configuration","text":"<pre><code>pub struct PoolConfig {\n    pub migration_fee_percentage: u8,         // Total migration fee\n    pub creator_migration_fee_percentage: u8, // Creator's share\n    // ...\n}\n</code></pre>"},{"location":"04-fee-system/#calculation_1","title":"Calculation","text":"<pre><code>// From total migration amount\nmigration_fee = migration_amount \u00d7 migration_fee_percentage / 100\nmigration_amount_after_fee = migration_amount - migration_fee\n\n// Split between partner and creator\ncreator_migration_fee = migration_fee \u00d7 creator_migration_fee_percentage / 100\npartner_migration_fee = migration_fee - creator_migration_fee\n</code></pre>"},{"location":"04-fee-system/#withdrawal","title":"Withdrawal","text":"<p>Instruction: <code>withdraw_migration_fee</code></p> <p>Flags: <pre><code>pub const PARTNER_MASK: u8 = 0b100;\npub const CREATOR_MASK: u8 = 0b010;\n</code></pre></p> <p>Location: <code>programs/dynamic-bonding-curve/src/instructions/migration/ix_withdraw_migration_fee.rs</code></p>"},{"location":"04-fee-system/#9-surplus-distribution","title":"9. Surplus Distribution","text":"<p>After migration, any excess quote tokens are distributed:</p>"},{"location":"04-fee-system/#calculation_2","title":"Calculation","text":"<pre><code>total_surplus = pool.quote_reserve - migration_threshold\n\npartner_and_creator_surplus = total_surplus \u00d7 80 / 100  // 80% share\nprotocol_surplus = total_surplus \u00d7 20 / 100             // 20% share\n\ncreator_surplus = partner_and_creator_surplus \u00d7 creator_share / 100\npartner_surplus = partner_and_creator_surplus - creator_surplus\n</code></pre>"},{"location":"04-fee-system/#constants","title":"Constants","text":"<pre><code>pub const PARTNER_AND_CREATOR_SURPLUS_SHARE: u8 = 80;  // 80%\n</code></pre> <p>Location: <code>programs/dynamic-bonding-curve/src/state/virtual_pool.rs:962-998</code></p>"},{"location":"04-fee-system/#fee-flow-diagram","title":"Fee Flow Diagram","text":"<pre><code>                         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                         \u2502   Swap Occurs   \u2502\n                         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                  \u2502\n                                  \u25bc\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502  Calculate Total Fee    \u2502\n                    \u2502  = Base Fee + Dynamic   \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                              \u2502\n                \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                \u25bc                           \u25bc\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502   Protocol Fee     \u2502      \u2502   Trading Fee      \u2502\n    \u2502       (20%)        \u2502      \u2502       (80%)        \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502                              \u2502\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2510           \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u25bc            \u25bc           \u25bc                      \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Protocol\u2502  \u2502Referral \u2502  \u2502Partner \u2502          \u2502 Creator \u2502\n\u2502  (80%) \u2502  \u2502  (20%)  \u2502  \u2502  (50%) \u2502          \u2502  (50%)  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n    \u2502            \u2502           \u2502                     \u2502\n    \u2502            \u2502           \u2502                     \u2502\n    \u25bc            \u25bc           \u25bc                     \u25bc\n Claimable   Sent to    Claimable            Claimable\n by admin   referral    by partner           by creator\n</code></pre>"},{"location":"05-workflows/","title":"Workflows and Common Operations","text":"<p>This document describes common workflows and step-by-step processes for using the Dynamic Bonding Curve program.</p>"},{"location":"05-workflows/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Pool Creation Workflow</li> <li>Trading Workflow</li> <li>Fee Management Workflow</li> <li>Migration Workflow</li> <li>Administrative Operations</li> </ol>"},{"location":"05-workflows/#1-pool-creation-workflow","title":"1. Pool Creation Workflow","text":""},{"location":"05-workflows/#overview","title":"Overview","text":"<p>Creating a new bonding curve pool involves two steps: 1. Create a pool configuration 2. Initialize the virtual pool with a token</p>"},{"location":"05-workflows/#11-create-pool-configuration","title":"1.1 Create Pool Configuration","text":"<p>Who: Partner (platform)</p> <p>Instruction: <code>create_config</code></p> <p>Steps:</p> <pre><code>// 1. Define the bonding curve\nconst curve = [\n    { sqrtPrice: \"184467440737095516160\", liquidity: \"1000000000000000000\" },  // Point 1\n    { sqrtPrice: \"260731679438094071296\", liquidity: \"2000000000000000000\" },  // Point 2\n    { sqrtPrice: \"368894881152183001088\", liquidity: \"3000000000000000000\" },  // Point 3\n    // ... up to 20 points\n];\n\n// 2. Configure fees\nconst poolFees = {\n    baseFee: {\n        cliffFeeNumerator: 10_000_000,  // 1% initial fee\n        baseFeeMode: 0,                  // Linear scheduler\n        firstFactor: 100,                // 100 periods\n        secondFactor: 60,                // 60 seconds per period\n        thirdFactor: 100_000,            // Reduce by 0.01% per period\n    },\n    dynamicFee: {\n        initialized: 1,\n        maxVolatilityAccumulator: 14_460_000,\n        variableFeeControl: 100_000,\n        binStep: 1,\n        filterPeriod: 10,\n        decayPeriod: 120,\n        reductionFactor: 5000,\n    },\n    protocolFeePercent: 20,  // 20% to protocol\n    referralFeePercent: 20,  // 20% of protocol to referral\n};\n\n// 3. Configure pool parameters\nconst configParams = {\n    poolFees,\n    creatorTradingFeePercentage: 50,  // 50% of trading fees to creator\n    tokenUpdateAuthority: 0,           // CreatorUpdateAuthority\n    migrationFee: {\n        feePercentage: 1,              // 1% migration fee\n        creatorFeePercentage: 50,      // 50% to creator\n    },\n    collectFeeMode: 0,                 // QuoteToken\n    migrationOption: 1,                // DammV2\n    activationType: 1,                 // Timestamp\n    tokenDecimal: 6,\n    tokenType: 0,                      // SplToken\n    quoteTokenFlag: 0,\n    partnerLockedLpPercentage: 30,\n    partnerLpPercentage: 20,\n    creatorLockedLpPercentage: 30,\n    creatorLpPercentage: 20,\n    swapBaseAmount: 800_000_000_000,   // 800k tokens\n    migrationQuoteThreshold: 85_000_000, // 85 USDC\n    migrationBaseThreshold: 200_000_000_000, // 200k tokens\n    sqrtStartPrice: \"18446744073709551616\", // Price = 1\n    lockedVesting: {\n        amountPerPeriod: 10_000_000_000,\n        cliffDurationFromMigrationTime: 86400,  // 1 day\n        frequency: 86400,                       // 1 day\n        numberOfPeriod: 30,                     // 30 days\n        cliffUnlockAmount: 50_000_000_000,\n    },\n    migrationFeeOption: 6,             // Customizable\n    fixedTokenSupplyFlag: 0,           // Dynamic supply\n    preMigrationTokenSupply: 0,\n    postMigrationTokenSupply: 0,\n    curve,\n};\n\n// 4. Call instruction\nawait program.methods\n    .createConfig(configParams)\n    .accounts({\n        config: configPDA,\n        quoteMint: USDC_MINT,\n        partner: partnerWallet.publicKey,\n        feeClaimer: feeClaimerWallet.publicKey,\n        leftoverReceiver: leftoverReceiverWallet.publicKey,\n        systemProgram: SystemProgram.programId,\n    })\n    .signers([partnerWallet])\n    .rpc();\n</code></pre> <p>PDA Derivation: <pre><code>const [configPDA] = PublicKey.findProgramAddressSync(\n    [Buffer.from(\"config\"), configIndexBuffer],\n    programId\n);\n</code></pre></p>"},{"location":"05-workflows/#12-initialize-virtual-pool","title":"1.2 Initialize Virtual Pool","text":"<p>Who: Creator (token launcher)</p> <p>Instruction: <code>initialize_virtual_pool_with_spl_token</code> or <code>initialize_virtual_pool_with_token2022</code></p> <p>Steps:</p> <pre><code>// 1. Prepare token metadata\nconst metadata = {\n    name: \"My Token\",\n    symbol: \"MTK\",\n    uri: \"https://example.com/metadata.json\",\n};\n\n// 2. Calculate initial base amount (includes swap buffer)\n// This is the amount of tokens to mint and deposit\nconst initialBaseAmount = calculateInitialSupply(\n    configParams.swapBaseAmount,\n    configParams.migrationBaseThreshold,\n    configParams.lockedVesting\n);\n\n// 3. Derive PDAs\nconst [poolPDA] = PublicKey.findProgramAddressSync(\n    [Buffer.from(\"pool\"), baseMint.publicKey.toBuffer(), configPDA.toBuffer()],\n    programId\n);\n\nconst [baseVaultPDA] = PublicKey.findProgramAddressSync(\n    [Buffer.from(\"token_vault\"), poolPDA.toBuffer(), baseMint.publicKey.toBuffer()],\n    programId\n);\n\nconst [quoteVaultPDA] = PublicKey.findProgramAddressSync(\n    [Buffer.from(\"token_vault\"), poolPDA.toBuffer(), quoteMint.toBuffer()],\n    programId\n);\n\n// 4. Call instruction\nawait program.methods\n    .initializeVirtualPoolWithSplToken({\n        tokenMetadata: metadata,\n        initialBaseAmount,\n    })\n    .accounts({\n        pool: poolPDA,\n        config: configPDA,\n        creator: creatorWallet.publicKey,\n        baseMint: baseMint.publicKey,\n        baseVault: baseVaultPDA,\n        quoteVault: quoteVaultPDA,\n        metadataAccount: metadataPDA,\n        // ... other Metaplex accounts\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: SYSVAR_RENT_PUBKEY,\n    })\n    .signers([creatorWallet, baseMint])\n    .rpc();\n</code></pre> <p>Result: Pool is live and ready for trading!</p>"},{"location":"05-workflows/#2-trading-workflow","title":"2. Trading Workflow","text":""},{"location":"05-workflows/#21-buy-tokens-quote-base","title":"2.1 Buy Tokens (Quote \u2192 Base)","text":"<p>Who: Any user</p> <p>Instruction: <code>swap2</code> with <code>ExactIn</code> mode</p> <p>Example: Buy tokens with 10 USDC</p> <pre><code>// 1. Fetch pool state\nconst pool = await program.account.virtualPool.fetch(poolPDA);\nconst config = await program.account.poolConfig.fetch(configPDA);\n\n// 2. Calculate expected output (off-chain simulation)\nconst { outputAmount, priceImpact } = simulateSwap({\n    pool,\n    config,\n    amountIn: 10_000_000,  // 10 USDC\n    tradeDirection: \"QuoteToBase\",\n    swapMode: \"ExactIn\",\n});\n\n// 3. Set slippage tolerance\nconst minOutputAmount = outputAmount * 0.99;  // 1% slippage\n\n// 4. Execute swap\nawait program.methods\n    .swap2({\n        amount0: 10_000_000,        // Input: 10 USDC\n        amount1: minOutputAmount,   // Min output\n        swapMode: 0,                // ExactIn\n    })\n    .accounts({\n        poolAuthority: poolAuthorityPDA,\n        config: configPDA,\n        pool: poolPDA,\n        inputTokenAccount: userQuoteAccount,\n        outputTokenAccount: userBaseAccount,\n        baseVault: baseVaultPDA,\n        quoteVault: quoteVaultPDA,\n        baseMint: baseMintPDA,\n        quoteMint: quoteMintPDA,\n        payer: userWallet.publicKey,\n        tokenBaseProgram: TOKEN_PROGRAM_ID,\n        tokenQuoteProgram: TOKEN_PROGRAM_ID,\n        referralTokenAccount: null,  // Optional\n    })\n    .signers([userWallet])\n    .rpc();\n</code></pre>"},{"location":"05-workflows/#22-sell-tokens-base-quote","title":"2.2 Sell Tokens (Base \u2192 Quote)","text":"<p>Who: Any user</p> <p>Instruction: <code>swap2</code> with <code>ExactIn</code> mode</p> <p>Example: Sell 1000 tokens for USDC</p> <pre><code>await program.methods\n    .swap2({\n        amount0: 1000_000_000,      // Input: 1000 tokens\n        amount1: minOutputUSDC,     // Min USDC output\n        swapMode: 0,                // ExactIn\n    })\n    .accounts({\n        poolAuthority: poolAuthorityPDA,\n        config: configPDA,\n        pool: poolPDA,\n        inputTokenAccount: userBaseAccount,   // Note: Base is input\n        outputTokenAccount: userQuoteAccount, // Quote is output\n        baseVault: baseVaultPDA,\n        quoteVault: quoteVaultPDA,\n        baseMint: baseMintPDA,\n        quoteMint: quoteMintPDA,\n        payer: userWallet.publicKey,\n        tokenBaseProgram: TOKEN_PROGRAM_ID,\n        tokenQuoteProgram: TOKEN_PROGRAM_ID,\n    })\n    .signers([userWallet])\n    .rpc();\n</code></pre>"},{"location":"05-workflows/#23-exact-output-swap","title":"2.3 Exact Output Swap","text":"<p>Who: Any user</p> <p>Instruction: <code>swap2</code> with <code>ExactOut</code> mode</p> <p>Example: Get exactly 1000 tokens</p> <pre><code>await program.methods\n    .swap2({\n        amount0: 1000_000_000,      // Desired output: 1000 tokens\n        amount1: maxInputUSDC,      // Max USDC to spend\n        swapMode: 2,                // ExactOut\n    })\n    .accounts({\n        // ... same as above\n    })\n    .signers([userWallet])\n    .rpc();\n</code></pre>"},{"location":"05-workflows/#24-with-referral","title":"2.4 With Referral","text":"<p>Who: Any user with referral</p> <p>Steps:</p> <pre><code>// Create referral token account\nconst referralTokenAccount = await getAssociatedTokenAddress(\n    quoteMintPDA,  // Or baseMintPDA, depending on fee mode\n    referralWallet.publicKey\n);\n\nawait program.methods\n    .swap2(params)\n    .accounts({\n        // ... normal accounts\n        referralTokenAccount,  // Add referral account\n    })\n    .signers([userWallet])\n    .rpc();\n</code></pre> <p>Result: Referral receives a share of the protocol fee.</p>"},{"location":"05-workflows/#3-fee-management-workflow","title":"3. Fee Management Workflow","text":""},{"location":"05-workflows/#31-claim-partner-trading-fees","title":"3.1 Claim Partner Trading Fees","text":"<p>Who: Partner (fee_claimer from config)</p> <p>Instruction: <code>claim_trading_fee</code></p> <pre><code>await program.methods\n    .claimTradingFee(\n        new BN(100_000_000),  // Max base tokens\n        new BN(100_000_000)   // Max quote tokens\n    )\n    .accounts({\n        config: configPDA,\n        pool: poolPDA,\n        partner: partnerWallet.publicKey,\n        baseVault: baseVaultPDA,\n        quoteVault: quoteVaultPDA,\n        partnerBaseAccount: partnerBaseTokenAccount,\n        partnerQuoteAccount: partnerQuoteTokenAccount,\n        poolAuthority: poolAuthorityPDA,\n        tokenBaseProgram: TOKEN_PROGRAM_ID,\n        tokenQuoteProgram: TOKEN_PROGRAM_ID,\n    })\n    .signers([partnerWallet])\n    .rpc();\n</code></pre>"},{"location":"05-workflows/#32-claim-creator-trading-fees","title":"3.2 Claim Creator Trading Fees","text":"<p>Who: Creator</p> <p>Instruction: <code>claim_creator_trading_fee</code></p> <pre><code>await program.methods\n    .claimCreatorTradingFee(\n        new BN(100_000_000),  // Max base tokens\n        new BN(100_000_000)   // Max quote tokens\n    )\n    .accounts({\n        config: configPDA,\n        pool: poolPDA,\n        creator: creatorWallet.publicKey,\n        baseVault: baseVaultPDA,\n        quoteVault: quoteVaultPDA,\n        creatorBaseAccount: creatorBaseTokenAccount,\n        creatorQuoteAccount: creatorQuoteTokenAccount,\n        poolAuthority: poolAuthorityPDA,\n        tokenBaseProgram: TOKEN_PROGRAM_ID,\n        tokenQuoteProgram: TOKEN_PROGRAM_ID,\n    })\n    .signers([creatorWallet])\n    .rpc();\n</code></pre>"},{"location":"05-workflows/#33-claim-protocol-fees","title":"3.3 Claim Protocol Fees","text":"<p>Who: Protocol admin (via claim operator)</p> <p>Instruction: <code>claim_protocol_fee</code></p> <pre><code>// 1. Create claim operator (one-time setup)\nawait program.methods\n    .createClaimFeeOperator()\n    .accounts({\n        claimFeeOperator: operatorPDA,\n        operator: operatorWallet.publicKey,\n        admin: adminWallet.publicKey,\n        systemProgram: SystemProgram.programId,\n    })\n    .signers([adminWallet, operatorWallet])\n    .rpc();\n\n// 2. Claim fees\nawait program.methods\n    .claimProtocolFee(\n        new BN(100_000_000),\n        new BN(100_000_000)\n    )\n    .accounts({\n        claimFeeOperator: operatorPDA,\n        pool: poolPDA,\n        baseVault: baseVaultPDA,\n        quoteVault: quoteVaultPDA,\n        feeClaimerBaseAccount: feeClaimerBaseAccount,\n        feeClaimerQuoteAccount: feeClaimerQuoteAccount,\n        poolAuthority: poolAuthorityPDA,\n        tokenBaseProgram: TOKEN_PROGRAM_ID,\n        tokenQuoteProgram: TOKEN_PROGRAM_ID,\n    })\n    .signers([operatorWallet])\n    .rpc();\n</code></pre>"},{"location":"05-workflows/#4-migration-workflow","title":"4. Migration Workflow","text":""},{"location":"05-workflows/#overview_1","title":"Overview","text":"<p>Migration happens when the bonding curve completes (reaches <code>migration_quote_threshold</code>).</p>"},{"location":"05-workflows/#41-automatic-curve-completion","title":"4.1 Automatic Curve Completion","text":"<p>Trigger: Last swap that reaches threshold</p> <p>What happens: 1. Pool state updated: <code>migration_progress = PostBondingCurve</code> (if vesting) or <code>LockedVesting</code> 2. <code>finish_curve_timestamp</code> recorded 3. <code>EvtCurveComplete</code> event emitted</p>"},{"location":"05-workflows/#42-migrate-to-meteora-damm","title":"4.2 Migrate to Meteora DAMM","text":"<p>Steps:</p>"},{"location":"05-workflows/#step-1-create-metadata","title":"Step 1: Create Metadata","text":"<pre><code>await program.methods\n    .migrationMeteoraDammCreateMetadata()\n    .accounts({\n        // Meteora program accounts\n    })\n    .rpc();\n</code></pre>"},{"location":"05-workflows/#step-2-create-locker","title":"Step 2: Create Locker","text":"<pre><code>await program.methods\n    .createLocker()\n    .accounts({\n        locker: lockerPDA,\n        pool: poolPDA,\n        payer: userWallet.publicKey,\n        systemProgram: SystemProgram.programId,\n    })\n    .signers([userWallet])\n    .rpc();\n</code></pre>"},{"location":"05-workflows/#step-3-initialize-migration-pool","title":"Step 3: Initialize Migration Pool","text":"<pre><code>await program.methods\n    .migrateMeteoraDamm()\n    .accounts({\n        config: configPDA,\n        pool: poolPDA,\n        creator: creatorWallet.publicKey,\n        // ... many Meteora accounts\n    })\n    .remainingAccounts(extraAccounts)\n    .rpc();\n</code></pre>"},{"location":"05-workflows/#step-4-lock-lp-tokens","title":"Step 4: Lock LP Tokens","text":"<pre><code>await program.methods\n    .migrateMeteoraDammLockLpToken()\n    .accounts({\n        pool: poolPDA,\n        locker: lockerPDA,\n        // ... locker accounts\n    })\n    .rpc();\n</code></pre>"},{"location":"05-workflows/#step-5-claim-lp-tokens-after-vesting","title":"Step 5: Claim LP Tokens (after vesting)","text":"<pre><code>// After vesting period expires\nawait program.methods\n    .migrateMeteoraDammClaimLpToken()\n    .accounts({\n        pool: poolPDA,\n        locker: lockerPDA,\n        beneficiary: beneficiaryWallet.publicKey,\n        // ... locker accounts\n    })\n    .rpc();\n</code></pre>"},{"location":"05-workflows/#43-withdraw-surplus","title":"4.3 Withdraw Surplus","text":"<p>Who: Partner, Creator, Protocol</p> <p>When: After migration completes</p> <p>Surplus Distribution: - Total surplus = <code>quote_reserve - migration_threshold</code> - Partner + Creator: 80% of surplus - Protocol: 20% of surplus</p>"},{"location":"05-workflows/#partner-withdraw","title":"Partner Withdraw:","text":"<pre><code>await program.methods\n    .partnerWithdrawSurplus()\n    .accounts({\n        config: configPDA,\n        pool: poolPDA,\n        partner: partnerWallet.publicKey,\n        quoteVault: quoteVaultPDA,\n        partnerQuoteAccount: partnerQuoteAccount,\n        poolAuthority: poolAuthorityPDA,\n        tokenQuoteProgram: TOKEN_PROGRAM_ID,\n    })\n    .signers([partnerWallet])\n    .rpc();\n</code></pre>"},{"location":"05-workflows/#creator-withdraw","title":"Creator Withdraw:","text":"<pre><code>await program.methods\n    .creatorWithdrawSurplus()\n    .accounts({\n        config: configPDA,\n        pool: poolPDA,\n        creator: creatorWallet.publicKey,\n        quoteVault: quoteVaultPDA,\n        creatorQuoteAccount: creatorQuoteAccount,\n        poolAuthority: poolAuthorityPDA,\n        tokenQuoteProgram: TOKEN_PROGRAM_ID,\n    })\n    .signers([creatorWallet])\n    .rpc();\n</code></pre>"},{"location":"05-workflows/#44-withdraw-migration-fees","title":"4.4 Withdraw Migration Fees","text":"<p>Who: Partner or Creator</p> <p>Instruction: <code>withdraw_migration_fee</code></p> <pre><code>// Partner withdraws\nawait program.methods\n    .withdrawMigrationFee(0b100)  // PARTNER_MASK\n    .accounts({\n        config: configPDA,\n        pool: poolPDA,\n        claimer: partnerWallet.publicKey,\n        // ... accounts\n    })\n    .signers([partnerWallet])\n    .rpc();\n\n// Creator withdraws\nawait program.methods\n    .withdrawMigrationFee(0b010)  // CREATOR_MASK\n    .accounts({\n        config: configPDA,\n        pool: poolPDA,\n        claimer: creatorWallet.publicKey,\n        // ... accounts\n    })\n    .signers([creatorWallet])\n    .rpc();\n</code></pre>"},{"location":"05-workflows/#45-withdraw-leftover","title":"4.5 Withdraw Leftover","text":"<p>Who: Anyone (permissionless, sends to <code>leftover_receiver</code>)</p> <p>When: After migration</p> <p>Purpose: Return excess base tokens (if fixed supply)</p> <pre><code>await program.methods\n    .withdrawLeftover()\n    .accounts({\n        config: configPDA,\n        pool: poolPDA,\n        leftoverReceiver: leftoverReceiverPDA,\n        baseVault: baseVaultPDA,\n        leftoverReceiverAccount: leftoverReceiverTokenAccount,\n        poolAuthority: poolAuthorityPDA,\n        baseMint: baseMintPDA,\n        tokenBaseProgram: TOKEN_PROGRAM_ID,\n    })\n    .rpc();\n</code></pre>"},{"location":"05-workflows/#5-administrative-operations","title":"5. Administrative Operations","text":""},{"location":"05-workflows/#51-transfer-pool-creator","title":"5.1 Transfer Pool Creator","text":"<p>Who: Current creator</p> <p>Instruction: <code>transfer_pool_creator</code></p> <pre><code>await program.methods\n    .transferPoolCreator()\n    .accounts({\n        pool: poolPDA,\n        creator: currentCreatorWallet.publicKey,\n        newCreator: newCreatorWallet.publicKey,\n    })\n    .signers([currentCreatorWallet])\n    .rpc();\n</code></pre>"},{"location":"05-workflows/#52-create-pool-metadata","title":"5.2 Create Pool Metadata","text":"<p>Who: Creator or Partner</p> <pre><code>// Creator metadata\nawait program.methods\n    .createVirtualPoolMetadata({\n        name: \"My Awesome Pool\",\n        uri: \"https://example.com/pool-info.json\",\n    })\n    .accounts({\n        virtualPoolMetadata: metadataPDA,\n        pool: poolPDA,\n        creator: creatorWallet.publicKey,\n        systemProgram: SystemProgram.programId,\n    })\n    .signers([creatorWallet])\n    .rpc();\n\n// Partner metadata\nawait program.methods\n    .createPartnerMetadata({\n        name: \"Platform Name\",\n        uri: \"https://platform.com/info.json\",\n    })\n    .accounts({\n        partnerMetadata: partnerMetadataPDA,\n        partner: partnerWallet.publicKey,\n        systemProgram: SystemProgram.programId,\n    })\n    .signers([partnerWallet])\n    .rpc();\n</code></pre>"},{"location":"05-workflows/#complete-lifecycle-diagram","title":"Complete Lifecycle Diagram","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                     POOL LIFECYCLE                           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n1. CREATION PHASE\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 Partner:    \u2502 create_config()\n   \u2502 Create      \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba [Config Created]\n   \u2502 Config      \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502\n          \u2502\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 Creator:    \u2502 initialize_pool_*()\n   \u2502 Initialize  \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba [Pool Live]\n   \u2502 Pool        \u2502            activation_point recorded\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518            migration_progress = PreBondingCurve\n\n2. TRADING PHASE\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 Traders:    \u2502 swap/swap2() repeatedly\n   \u2502 Buy/Sell    \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba [Reserves Updated]\n   \u2502 Tokens      \u2502            [Fees Accumulated]\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518            [Price Changes]\n          \u2502\n          \u2502 (optional)\n          \u25bc\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 Partner/    \u2502 claim_*_trading_fee()\n   \u2502 Creator:    \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba [Fees Claimed]\n   \u2502 Claim Fees  \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n3. COMPLETION (automatic on last swap)\n          \u2502\n          \u2502 quote_reserve &gt;= migration_quote_threshold\n          \u25bc\n   [Curve Complete Event]\n   migration_progress = PostBondingCurve or LockedVesting\n   finish_curve_timestamp recorded\n\n4. MIGRATION PHASE\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 Anyone:     \u2502 create_locker()\n   \u2502 Create      \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba [Locker Created]\n   \u2502 Locker      \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502\n          \u25bc\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 Anyone:     \u2502 migration_*_create_metadata()\n   \u2502 Create      \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba [Migration Metadata]\n   \u2502 Metadata    \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502\n          \u25bc\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 Anyone:     \u2502 migrate_*()\n   \u2502 Initialize  \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba [DEX Pool Created]\n   \u2502 DEX Pool    \u2502            migration_progress = CreatedPool\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518            is_migrated = 1\n          \u2502\n          \u25bc\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 Anyone:     \u2502 migrate_*_lock_lp_token()\n   \u2502 Lock LP     \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba [LP Tokens Locked]\n   \u2502 Tokens      \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n5. POST-MIGRATION\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 Partner/    \u2502 withdraw_surplus()\n   \u2502 Creator/    \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba [Surplus Claimed]\n   \u2502 Protocol:   \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502\n          \u25bc\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 Partner/    \u2502 withdraw_migration_fee()\n   \u2502 Creator:    \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba [Migration Fees Claimed]\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502\n          \u25bc\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 Anyone:     \u2502 withdraw_leftover()\n   \u2502 Withdraw    \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba [Leftover Tokens Returned]\n   \u2502 Leftover    \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502\n          \u25bc\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 After       \u2502 migrate_*_claim_lp_token()\n   \u2502 Vesting:    \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba [LP Tokens Unlocked]\n   \u2502 Claim LP    \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n                    [Pool Fully Retired]\n</code></pre>"},{"location":"06-migration/","title":"Migration System","text":"<p>This document provides in-depth details about the migration system that transfers liquidity from the bonding curve to established DEXs.</p>"},{"location":"06-migration/#overview","title":"Overview","text":"<p>When a bonding curve completes (reaches its target), the accumulated liquidity is migrated to a permanent DEX pool. The program supports two migration targets:</p> <ol> <li>Meteora Dynamic AMM (DAMM) - First-generation Meteora pools</li> <li>Meteora Dynamic AMM V2 - Second-generation with improved features</li> </ol>"},{"location":"06-migration/#migration-states","title":"Migration States","text":""},{"location":"06-migration/#migrationprogress-enum","title":"MigrationProgress Enum","text":"<pre><code>pub enum MigrationProgress {\n    PreBondingCurve = 0,    // Active trading phase\n    PostBondingCurve = 1,   // Curve complete, vesting active\n    LockedVesting = 2,      // Ready for migration\n    CreatedPool = 3,        // Migrated to DEX\n}\n</code></pre>"},{"location":"06-migration/#state-transitions","title":"State Transitions","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  PreBondingCurve    \u2502  Active trading\n\u2502  (0)                \u2502  quote_reserve &lt; threshold\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n           \u2502\n           \u2502 Last swap reaches threshold\n           \u2502 Event: EvtCurveComplete\n           \u2502\n           \u25bc\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502 Has vesting? \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n           \u2502\n     \u250c\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2510\n     \u2502           \u2502\n    Yes          No\n     \u2502           \u2502\n     \u25bc           \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502PostBonding\u2502  \u2502LockedVesting\u2502\n\u2502Curve (1)  \u2502  \u2502    (2)      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      \u2502               \u2502\n      \u2502 Vesting       \u2502\n      \u2502 complete      \u2502\n      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n              \u2502\n              \u25bc\n      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n      \u2502 CreatedPool  \u2502  Migration executed\n      \u2502    (3)       \u2502  is_migrated = 1\n      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"06-migration/#migration-configuration","title":"Migration Configuration","text":""},{"location":"06-migration/#pool-config-parameters","title":"Pool Config Parameters","text":"<pre><code>pub struct PoolConfig {\n    // Migration settings\n    pub migration_option: u8,          // 0=MeteoraDamm, 1=DammV2\n    pub migration_quote_threshold: u64, // Quote amount to trigger migration\n    pub migration_base_threshold: u64,  // Base tokens for migration pool\n    pub migration_sqrt_price: u128,     // Target price for migration\n\n    // Migration fees\n    pub migration_fee_percentage: u8,         // Total fee (e.g., 1%)\n    pub creator_migration_fee_percentage: u8, // Creator's share (e.g., 50%)\n    pub migration_fee_option: u8,             // Fee tier option\n\n    // LP distribution\n    pub partner_locked_lp_percentage: u8,  // Locked LP for partner\n    pub partner_lp_percentage: u8,         // Unlocked LP for partner\n    pub creator_locked_lp_percentage: u8,  // Locked LP for creator\n    pub creator_lp_percentage: u8,         // Unlocked LP for creator\n\n    // Migrated pool configuration\n    pub migrated_pool_fee_bps: u16,        // Fee for migrated pool\n    pub migrated_collect_fee_mode: u8,     // Fee collection mode\n    pub migrated_dynamic_fee: u8,          // Dynamic fee option\n\n    // Vesting for locked LP\n    pub locked_vesting_config: LockedVestingConfig,\n}\n</code></pre>"},{"location":"06-migration/#migration-fee-options","title":"Migration Fee Options","text":"<pre><code>pub enum MigrationFeeOption {\n    FixedBps25 = 0,    // 0.25%\n    FixedBps30 = 1,    // 0.3%\n    FixedBps100 = 2,   // 1%\n    FixedBps200 = 3,   // 2%\n    FixedBps400 = 4,   // 4%\n    FixedBps600 = 5,   // 6%\n    Customizable = 6,  // Custom fee\n}\n</code></pre>"},{"location":"06-migration/#curve-completion","title":"Curve Completion","text":""},{"location":"06-migration/#trigger-conditions","title":"Trigger Conditions","text":"<p>A curve completes when: <pre><code>pool.quote_reserve &gt;= config.migration_quote_threshold\n</code></pre></p> <p>This check happens on every swap in <code>handle_swap_wrapper()</code>.</p>"},{"location":"06-migration/#completion-logic","title":"Completion Logic","text":"<pre><code>// Check if curve completed\nif pool.is_curve_complete(config.migration_quote_threshold) {\n    // 1. Validate base token reserve\n    let required_base_balance = config.migration_base_threshold\n        + pool.get_protocol_and_trading_base_fee()?\n        + locked_vesting_total;\n\n    require!(\n        base_vault_balance &gt;= required_base_balance,\n        PoolError::InsufficientLiquidityForMigration\n    );\n\n    // 2. Record completion time\n    pool.finish_curve_timestamp = current_timestamp;\n\n    // 3. Update migration progress\n    if locked_vesting_params.has_vesting() {\n        pool.set_migration_progress(MigrationProgress::PostBondingCurve);\n    } else {\n        pool.set_migration_progress(MigrationProgress::LockedVesting);\n    }\n\n    // 4. Emit event\n    emit!(EvtCurveComplete {\n        pool: pool_key,\n        config: config_key,\n        base_reserve: pool.base_reserve,\n        quote_reserve: pool.quote_reserve,\n    });\n}\n</code></pre> <p>Location: <code>programs/dynamic-bonding-curve/src/instructions/swap/ix_swap.rs:287-323</code></p>"},{"location":"06-migration/#migration-amounts","title":"Migration Amounts","text":""},{"location":"06-migration/#quote-token-calculation","title":"Quote Token Calculation","text":"<p>The migration takes most quote tokens, minus fees:</p> <pre><code>pub struct MigrationAmount {\n    pub quote_amount: u64,  // Amount for DEX pool\n    pub fee: u64,           // Migration fee\n}\n\nfn get_migration_quote_amount(\n    migration_quote_threshold: u64,\n    migration_fee_percentage: u8,\n) -&gt; MigrationAmount {\n    // Calculate net amount after fee\n    let quote_amount = migration_quote_threshold\n        * (100 - migration_fee_percentage)\n        / 100;\n\n    let fee = migration_quote_threshold - quote_amount;\n\n    MigrationAmount { quote_amount, fee }\n}\n</code></pre> <p>Example: <pre><code>migration_quote_threshold = 85_000_000 (85 USDC)\nmigration_fee_percentage = 1\n\nquote_amount = 85 * 99 / 100 = 84.15 USDC (to DEX)\nfee = 85 - 84.15 = 0.85 USDC (split partner/creator)\n</code></pre></p>"},{"location":"06-migration/#base-token-calculation","title":"Base Token Calculation","text":"<pre><code>migration_base_amount = config.migration_base_threshold\n</code></pre> <p>This is a fixed amount configured when the pool is created.</p>"},{"location":"06-migration/#lp-token-distribution","title":"LP Token Distribution","text":"<p>After migration, LP tokens are distributed:</p> <pre><code>pub struct LiquidityDistribution {\n    pub partner: LiquidityDistributionItem {\n        pub unlocked_liquidity: u128,  // Immediately claimable\n        pub locked_liquidity: u128,    // Vested over time\n    },\n    pub creator: LiquidityDistributionItem {\n        pub unlocked_liquidity: u128,\n        pub locked_liquidity: u128,\n    },\n}\n\nfn get_lp_distribution(lp_amount: u64) -&gt; LiquidityDistributionU64 {\n    let partner_locked_lp = lp_amount\n        * partner_locked_lp_percentage / 100;\n\n    let partner_lp = lp_amount\n        * partner_lp_percentage / 100;\n\n    let creator_locked_lp = lp_amount\n        * creator_locked_lp_percentage / 100;\n\n    let creator_lp = lp_amount\n        - partner_locked_lp\n        - partner_lp\n        - creator_locked_lp;\n\n    LiquidityDistributionU64 {\n        partner_locked_lp,\n        partner_lp,\n        creator_locked_lp,\n        creator_lp,\n    }\n}\n</code></pre> <p>Example Configuration: <pre><code>partner_locked_lp_percentage = 30\npartner_lp_percentage = 20\ncreator_locked_lp_percentage = 30\ncreator_lp_percentage = 20 (calculated)\n\nTotal LP tokens = 1000\n\nDistribution:\n- Partner locked: 300 LP\n- Partner unlocked: 200 LP\n- Creator locked: 300 LP\n- Creator unlocked: 200 LP\n</code></pre></p> <p>Location: <code>programs/dynamic-bonding-curve/src/state/config.rs:769-835</code></p>"},{"location":"06-migration/#meteora-damm-migration","title":"Meteora DAMM Migration","text":""},{"location":"06-migration/#overview_1","title":"Overview","text":"<p>Migrates to Meteora's first-generation Dynamic AMM.</p>"},{"location":"06-migration/#migration-flow","title":"Migration Flow","text":"<pre><code>1. migration_meteora_damm_create_metadata\n   \u2514\u2500\u25ba Creates migration metadata account\n\n2. create_locker\n   \u2514\u2500\u25ba Creates locker for LP token vesting\n\n3. migrate_meteora_damm\n   \u2514\u2500\u25ba Initializes Meteora pool\n   \u2514\u2500\u25ba Transfers liquidity\n   \u2514\u2500\u25ba Mints LP tokens\n\n4. migrate_meteora_damm_lock_lp_token\n   \u2514\u2500\u25ba Locks portion of LP tokens\n\n5. (After vesting) migrate_meteora_damm_claim_lp_token\n   \u2514\u2500\u25ba Claims unlocked LP tokens\n</code></pre>"},{"location":"06-migration/#metadata-structure","title":"Metadata Structure","text":"<pre><code>pub struct MeteoraDammMigrationMetadata {\n    pub pool: Pubkey,\n    pub damm_pool: Pubkey,\n    pub locker: Pubkey,\n    pub partner_locked_escrow: Pubkey,\n    pub creator_locked_escrow: Pubkey,\n}\n</code></pre> <p>PDA Seeds: <code>[\"meteora\", pool_pubkey]</code></p>"},{"location":"06-migration/#migration-instruction","title":"Migration Instruction","text":"<p>The migration creates a new Meteora pool with: - Initial price from bonding curve - Liquidity from accumulated reserves - Fee configuration from pool config</p> <p>Key Accounts: - Bonding curve pool and vaults - Meteora pool and vaults - LP token mint - Locker accounts - Partner and creator token accounts</p> <p>Location: <code>programs/dynamic-bonding-curve/src/instructions/migration/meteora_damm/</code></p>"},{"location":"06-migration/#damm-v2-migration","title":"DAMM V2 Migration","text":""},{"location":"06-migration/#overview_2","title":"Overview","text":"<p>Migrates to Meteora's second-generation Dynamic AMM with improved features.</p>"},{"location":"06-migration/#migration-flow_1","title":"Migration Flow","text":"<pre><code>1. migration_damm_v2_create_metadata\n   \u2514\u2500\u25ba Creates V2 migration metadata\n\n2. create_locker\n   \u2514\u2500\u25ba Creates locker for vesting\n\n3. migration_damm_v2\n   \u2514\u2500\u25ba Initializes DAMM V2 pool\n   \u2514\u2500\u25ba Transfers liquidity\n   \u2514\u2500\u25ba Handles LP distribution\n</code></pre>"},{"location":"06-migration/#metadata-structure_1","title":"Metadata Structure","text":"<pre><code>pub struct DammV2MigrationMetadata {\n    pub pool: Pubkey,\n    pub damm_pool: Pubkey,\n    pub locker: Pubkey,\n}\n</code></pre> <p>PDA Seeds: <code>[\"damm_v2\", pool_pubkey]</code></p>"},{"location":"06-migration/#differences-from-damm-v1","title":"Differences from DAMM V1","text":"<ol> <li>Simpler LP locking - Built-in locker integration</li> <li>Better fee structure - More flexible fee options</li> <li>Improved oracle - Better price feed integration</li> </ol> <p>Location: <code>programs/dynamic-bonding-curve/src/instructions/migration/dynamic_amm_v2/</code></p>"},{"location":"06-migration/#locker-system","title":"Locker System","text":""},{"location":"06-migration/#purpose","title":"Purpose","text":"<p>The locker holds LP tokens and releases them according to a vesting schedule.</p>"},{"location":"06-migration/#locker-account","title":"Locker Account","text":"<pre><code>// From external locker program\npub struct Locker {\n    pub base: Pubkey,\n    pub beneficiary: Pubkey,\n    pub token_mint: Pubkey,\n    pub locked_supply: u64,\n    pub start_timestamp: i64,\n    pub cliff_timestamp: i64,\n    pub end_timestamp: i64,\n}\n</code></pre> <p>PDA Seeds: <code>[\"base_locker\", pool_pubkey]</code></p>"},{"location":"06-migration/#vesting-configuration","title":"Vesting Configuration","text":"<pre><code>pub struct LockedVestingConfig {\n    pub amount_per_period: u64,                    // Per-period release\n    pub cliff_duration_from_migration_time: u64,   // Initial lock\n    pub frequency: u64,                            // Vesting interval\n    pub number_of_period: u64,                     // Total periods\n    pub cliff_unlock_amount: u64,                  // Cliff unlock\n}\n</code></pre>"},{"location":"06-migration/#vesting-schedule","title":"Vesting Schedule","text":"<pre><code>Total locked amount = amount_per_period \u00d7 number_of_period + cliff_unlock_amount\n\nTimeline:\nt=0 (migration) \u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500 ... \u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\n                  \u2502        \u2502        \u2502        \u2502           \u2502\n           cliff_duration  \u2502        \u2502        \u2502           \u2502\n                  \u2502        \u2502        \u2502        \u2502           \u2502\n                  \u25bc        \u25bc        \u25bc        \u25bc           \u25bc\n             cliff_unlock  period1  period2  period3 ... periodN\n             amount        amount   amount   amount      amount\n</code></pre> <p>Example: <pre><code>cliff_unlock_amount = 100 LP\namount_per_period = 50 LP\nnumber_of_period = 10\ncliff_duration_from_migration_time = 86400 (1 day)\nfrequency = 86400 (1 day)\n\nTotal locked: 100 + 50*10 = 600 LP\n\nSchedule:\nDay 0: Nothing\nDay 1: 100 LP unlocked (cliff)\nDay 2: 50 LP unlocked (period 1)\nDay 3: 50 LP unlocked (period 2)\n...\nDay 11: 50 LP unlocked (period 10)\n</code></pre></p> <p>Location: <code>programs/dynamic-bonding-curve/src/state/config.rs:324-347</code></p>"},{"location":"06-migration/#surplus-distribution","title":"Surplus Distribution","text":""},{"location":"06-migration/#what-is-surplus","title":"What is Surplus?","text":"<p>After migration, any quote tokens above the threshold are \"surplus\":</p> <pre><code>total_surplus = pool.quote_reserve - config.migration_quote_threshold\n</code></pre>"},{"location":"06-migration/#distribution","title":"Distribution","text":"<pre><code>partner_and_creator_surplus = total_surplus \u00d7 80 / 100\nprotocol_surplus = total_surplus \u00d7 20 / 100\n\n// Further split between partner and creator\ncreator_surplus = partner_and_creator_surplus\n    \u00d7 creator_share / 100\n\npartner_surplus = partner_and_creator_surplus\n    - creator_surplus\n</code></pre> <p>Constants: <pre><code>pub const PARTNER_AND_CREATOR_SURPLUS_SHARE: u8 = 80;  // 80%\n</code></pre></p>"},{"location":"06-migration/#withdrawal","title":"Withdrawal","text":"<p>Each party withdraws their surplus independently:</p> <pre><code>// Partner\nawait program.methods.partnerWithdrawSurplus()...\n\n// Creator\nawait program.methods.creatorWithdrawSurplus()...\n\n// Protocol\nawait program.methods.protocolWithdrawSurplus()...\n</code></pre> <p>Requirements: - Pool must be migrated (<code>is_migrated = 1</code>) - Surplus not already withdrawn - Caller must be authorized party</p> <p>Location: <code>programs/dynamic-bonding-curve/src/state/virtual_pool.rs:962-1010</code></p>"},{"location":"06-migration/#migration-fees","title":"Migration Fees","text":""},{"location":"06-migration/#fee-structure","title":"Fee Structure","text":"<pre><code>migration_fee = migration_quote_threshold \u00d7 migration_fee_percentage / 100\n\ncreator_migration_fee = migration_fee \u00d7 creator_migration_fee_percentage / 100\npartner_migration_fee = migration_fee - creator_migration_fee\n</code></pre>"},{"location":"06-migration/#withdrawal_1","title":"Withdrawal","text":"<pre><code>pub const PARTNER_MASK: u8 = 0b100;\npub const CREATOR_MASK: u8 = 0b010;\n\n// Track withdrawal with bitflags\npub migration_fee_withdraw_status: u8\n\n// Partner withdraws\nwithdraw_migration_fee(PARTNER_MASK)\n\u2192 migration_fee_withdraw_status |= PARTNER_MASK\n\n// Creator withdraws\nwithdraw_migration_fee(CREATOR_MASK)\n\u2192 migration_fee_withdraw_status |= CREATOR_MASK\n</code></pre> <p>Eligibility Check: <pre><code>fn eligible_to_withdraw_migration_fee(mask: u8) -&gt; bool {\n    migration_fee_withdraw_status &amp; mask == 0\n}\n</code></pre></p> <p>Location: <code>programs/dynamic-bonding-curve/src/instructions/migration/ix_withdraw_migration_fee.rs</code></p>"},{"location":"06-migration/#leftover-tokens","title":"Leftover Tokens","text":""},{"location":"06-migration/#what-are-leftovers","title":"What are Leftovers?","text":"<p>For fixed supply tokens, there may be excess base tokens after migration:</p> <pre><code>leftover = base_vault_balance\n    - migration_base_threshold\n    - protocol_and_trading_fees\n    - locked_vesting_amount\n</code></pre>"},{"location":"06-migration/#burnable-vs-non-burnable","title":"Burnable vs Non-burnable","text":"<pre><code>max_burnable = pre_migration_token_supply - post_migration_token_supply\n\nburnable_amount = min(leftover, max_burnable)\n</code></pre> <p>Options: 1. Burn excess tokens (if mintable) 2. Transfer to <code>leftover_receiver</code> (if fixed supply)</p>"},{"location":"06-migration/#withdrawal_2","title":"Withdrawal","text":"<pre><code>await program.methods.withdrawLeftover()\n    .accounts({\n        config,\n        pool,\n        leftoverReceiver,\n        baseVault,\n        leftoverReceiverAccount,\n        // ...\n    })\n    .rpc();\n</code></pre> <p>Location: <code>programs/dynamic-bonding-curve/src/instructions/migration/withdraw_leftover.rs</code></p>"},{"location":"06-migration/#migration-checklist","title":"Migration Checklist","text":"<p>Before executing migration:</p> <ul> <li> Curve has completed (<code>quote_reserve &gt;= threshold</code>)</li> <li> Vesting period has passed (if applicable)</li> <li> Locker account created</li> <li> Migration metadata created</li> <li> Sufficient SOL for rent</li> <li> All necessary accounts prepared</li> <li> Partner/creator ready to receive LP tokens</li> </ul> <p>After migration:</p> <ul> <li> Verify DEX pool created</li> <li> Verify LP tokens minted and distributed</li> <li> Claim unlocked LP tokens</li> <li> Withdraw surplus (if any)</li> <li> Withdraw migration fees</li> <li> Withdraw leftover tokens (if applicable)</li> <li> Lock LP tokens for vesting</li> </ul>"},{"location":"06-migration/#error-cases","title":"Error Cases","text":"<p>Common migration errors:</p> <pre><code>PoolError::PoolIsNotCompleted\n// Pool hasn't reached threshold yet\n\nPoolError::InsufficientLiquidityForMigration\n// Not enough base tokens in vault\n\nPoolError::PoolIsNotMigrated\n// Trying to withdraw surplus before migration\n\nPoolError::AlreadyWithdrawSurplus\n// Surplus already claimed\n\nPoolError::MigrationFeeAlreadyWithdrawn\n// Migration fee already claimed\n</code></pre>"},{"location":"06-migration/#migration-timeline-example","title":"Migration Timeline Example","text":"<pre><code>Day 0, 00:00 - Pool created\n    \u2193\n[Trading Phase - 7 days]\n    \u2193\nDay 7, 15:30 - Last swap reaches threshold\n              - EvtCurveComplete emitted\n              - migration_progress = PostBondingCurve\n    \u2193\n[Vesting Phase - 1 day cliff]\n    \u2193\nDay 8, 15:30 - Cliff period expires\n              - migration_progress = LockedVesting\n              - Ready for migration\n    \u2193\nDay 8, 16:00 - Someone creates locker\n    \u2193\nDay 8, 16:05 - Someone creates metadata\n    \u2193\nDay 8, 16:10 - Someone executes migration\n              - Meteora pool created\n              - LP tokens minted\n              - is_migrated = 1\n              - migration_progress = CreatedPool\n    \u2193\nDay 8, 16:15 - LP tokens locked in vesting\n    \u2193\nDay 8, 16:20 - Partner withdraws surplus\n    \u2193\nDay 8, 16:25 - Creator withdraws surplus\n    \u2193\nDay 8, 16:30 - Protocol withdraws surplus\n    \u2193\n[LP Vesting Phase - 30 days]\n    \u2193\nDay 9, 15:30 - First LP tokens unlock (cliff)\n    \u2193\nDay 10, 15:30 - Period 1 LP tokens unlock\n    \u2193\n...\n    \u2193\nDay 38, 15:30 - Period 30 LP tokens unlock\n              - All LP tokens fully vested\n</code></pre>"},{"location":"SETUP/","title":"Setup Guide for GitHub Pages","text":"<p>This guide will help you complete the setup for hosting the documentation at https://docs.go.meme</p>"},{"location":"SETUP/#whats-already-done","title":"\u2705 What's Already Done","text":"<ul> <li>\u2705 Documentation files created and committed</li> <li>\u2705 MkDocs configuration with Material theme</li> <li>\u2705 GitHub Actions workflow for auto-deployment</li> <li>\u2705 CNAME file for custom domain</li> <li>\u2705 Repository pushed to GitHub</li> </ul>"},{"location":"SETUP/#next-steps","title":"\ud83d\udccb Next Steps","text":""},{"location":"SETUP/#1-enable-github-pages","title":"1. Enable GitHub Pages","text":"<ol> <li>Go to your repository: https://github.com/go-meme/gomeme-docs</li> <li>Click Settings \u2192 Pages (in the left sidebar)</li> <li>Under \"Build and deployment\":</li> <li>Source: Select \"Deploy from a branch\"</li> <li>Branch: Select <code>gh-pages</code> and <code>/ (root)</code></li> <li>Click Save</li> </ol>"},{"location":"SETUP/#2-configure-custom-domain-in-github","title":"2. Configure Custom Domain in GitHub","text":"<ol> <li>Still in Settings \u2192 Pages</li> <li>Under \"Custom domain\":</li> <li>Enter: <code>docs.go.meme</code></li> <li>Click Save</li> <li>Wait for DNS check (may take a few minutes)</li> <li>Once verified, check \"Enforce HTTPS\"</li> </ol>"},{"location":"SETUP/#3-configure-dns-in-cloudflare","title":"3. Configure DNS in Cloudflare","text":"<ol> <li>Go to your Cloudflare dashboard</li> <li>Select your <code>go.meme</code> domain</li> <li>Click DNS \u2192 Records</li> <li>Add/Update the following records:</li> </ol> <p>Option A: Using CNAME (Recommended) <pre><code>Type: CNAME\nName: docs\nTarget: go-meme.github.io\nProxy status: Proxied (orange cloud)\nTTL: Auto\n</code></pre></p> <p>Option B: Using A Records (Alternative) <pre><code>Type: A\nName: docs\nIPv4 address: 185.199.108.153\nProxy status: Proxied\n</code></pre></p> <p>Add additional A records for:    - 185.199.109.153    - 185.199.110.153    - 185.199.111.153</p> <ol> <li>Save the DNS record</li> </ol>"},{"location":"SETUP/#4-wait-for-deployment","title":"4. Wait for Deployment","text":"<p>The GitHub Action will automatically: 1. Build the MkDocs site 2. Deploy to <code>gh-pages</code> branch 3. Make it available at your custom domain</p> <p>Timeline: - GitHub Actions deploy: ~2-5 minutes - DNS propagation: 5-30 minutes - SSL certificate: 10-60 minutes</p>"},{"location":"SETUP/#5-verify-deployment","title":"5. Verify Deployment","text":"<p>After ~30 minutes, visit: - https://docs.go.meme (your custom domain) - https://go-meme.github.io/gomeme-docs (GitHub Pages default)</p> <p>Both should show your documentation!</p>"},{"location":"SETUP/#updating-documentation","title":"\ud83d\udd04 Updating Documentation","text":""},{"location":"SETUP/#local-development","title":"Local Development","text":"<ol> <li> <p>Install dependencies:    <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Run local server:    <pre><code>mkdocs serve\n</code></pre></p> </li> </ol> <p>Visit: http://127.0.0.1:8000</p> <ol> <li> <p>Make changes to <code>.md</code> files</p> </li> <li> <p>Commit and push:    <pre><code>git add .\ngit commit -m \"Update documentation\"\ngit push\n</code></pre></p> </li> </ol>"},{"location":"SETUP/#auto-deployment","title":"Auto-Deployment","text":"<p>Every push to <code>main</code> branch will automatically: 1. Trigger GitHub Actions 2. Build the site with MkDocs 3. Deploy to GitHub Pages 4. Update https://docs.go.meme</p>"},{"location":"SETUP/#documentation-structure","title":"\ud83d\udcc1 Documentation Structure","text":"<pre><code>docs/\n\u251c\u2500\u2500 mkdocs.yml              # MkDocs configuration\n\u251c\u2500\u2500 requirements.txt        # Python dependencies\n\u251c\u2500\u2500 CNAME                   # Custom domain file\n\u251c\u2500\u2500 .github/\n\u2502   \u2514\u2500\u2500 workflows/\n\u2502       \u2514\u2500\u2500 deploy.yml      # Auto-deployment workflow\n\u251c\u2500\u2500 stylesheets/\n\u2502   \u2514\u2500\u2500 extra.css           # Custom CSS\n\u251c\u2500\u2500 javascripts/\n\u2502   \u2514\u2500\u2500 mathjax.js          # Math rendering\n\u251c\u2500\u2500 00-overview.md          # Program overview\n\u251c\u2500\u2500 01-instructions.md      # Instruction reference\n\u251c\u2500\u2500 02-state-accounts.md    # Account structures\n\u251c\u2500\u2500 03-bonding-curve-math.md # Mathematical details\n\u251c\u2500\u2500 04-fee-system.md        # Fee system\n\u251c\u2500\u2500 05-workflows.md         # Workflows and examples\n\u251c\u2500\u2500 06-migration.md         # Migration details\n\u2514\u2500\u2500 README.md               # Documentation hub\n</code></pre>"},{"location":"SETUP/#customization","title":"\ud83c\udfa8 Customization","text":""},{"location":"SETUP/#theme-colors","title":"Theme Colors","text":"<p>Edit <code>mkdocs.yml</code>: <pre><code>theme:\n  palette:\n    primary: indigo  # Change to: red, blue, green, etc.\n    accent: indigo\n</code></pre></p>"},{"location":"SETUP/#navigation","title":"Navigation","text":"<p>Edit <code>mkdocs.yml</code> under <code>nav:</code> section to reorganize pages.</p>"},{"location":"SETUP/#logo","title":"Logo","text":"<p>Add your logo: 1. Create <code>docs/assets/logo.png</code> 2. Update <code>mkdocs.yml</code>:    <pre><code>theme:\n  logo: assets/logo.png\n</code></pre></p>"},{"location":"SETUP/#custom-css","title":"Custom CSS","text":"<p>Edit <code>docs/stylesheets/extra.css</code> for custom styling.</p>"},{"location":"SETUP/#features-enabled","title":"\ud83d\udd0d Features Enabled","text":"<ul> <li>\u2705 Material Design theme</li> <li>\u2705 Dark/Light mode toggle</li> <li>\u2705 Instant navigation</li> <li>\u2705 Search functionality</li> <li>\u2705 Code syntax highlighting</li> <li>\u2705 Copy code button</li> <li>\u2705 MathJax for formulas</li> <li>\u2705 Table of contents</li> <li>\u2705 Mobile responsive</li> <li>\u2705 Social links</li> <li>\u2705 Git repository link</li> </ul>"},{"location":"SETUP/#troubleshooting","title":"\ud83d\udc1b Troubleshooting","text":""},{"location":"SETUP/#github-pages-not-showing","title":"GitHub Pages not showing","text":"<ol> <li>Check GitHub Actions: https://github.com/go-meme/gomeme-docs/actions</li> <li>Ensure workflow completed successfully</li> <li>Check <code>gh-pages</code> branch exists</li> <li>Verify Pages settings point to <code>gh-pages</code> branch</li> </ol>"},{"location":"SETUP/#custom-domain-not-working","title":"Custom domain not working","text":"<ol> <li>Check DNS records in Cloudflare</li> <li>Verify CNAME file contains <code>docs.go.meme</code></li> <li>Wait 30-60 minutes for DNS propagation</li> <li>Check GitHub Pages settings shows domain as verified</li> </ol>"},{"location":"SETUP/#build-errors","title":"Build errors","text":"<ol> <li>Check GitHub Actions logs</li> <li>Verify <code>requirements.txt</code> has correct versions</li> <li>Check <code>mkdocs.yml</code> for syntax errors</li> </ol>"},{"location":"SETUP/#https-not-working","title":"HTTPS not working","text":"<ol> <li>Wait 10-60 minutes for certificate provisioning</li> <li>Ensure \"Enforce HTTPS\" is checked in GitHub Pages settings</li> <li>Clear browser cache</li> </ol>"},{"location":"SETUP/#mkdocs-resources","title":"\ud83d\udcda MkDocs Resources","text":"<ul> <li>MkDocs Documentation</li> <li>Material for MkDocs</li> <li>GitHub Pages Documentation</li> </ul>"},{"location":"SETUP/#checklist","title":"\u2705 Checklist","text":"<ul> <li> Enable GitHub Pages in repository settings</li> <li> Configure <code>gh-pages</code> branch as source</li> <li> Set custom domain to <code>docs.go.meme</code> in GitHub</li> <li> Add CNAME record in Cloudflare DNS</li> <li> Wait for first deployment to complete</li> <li> Verify site accessible at https://docs.go.meme</li> <li> Enable HTTPS enforcement</li> <li> Test local development with <code>mkdocs serve</code></li> </ul>"},{"location":"SETUP/#youre-done","title":"\ud83c\udf89 You're Done!","text":"<p>Once all steps are complete, your documentation will be live at:</p> <p>\ud83c\udf10 https://docs.go.meme</p> <p>Every push to the <code>main</code> branch will automatically update the site within minutes!</p>"},{"location":"vi/","title":"T\u00e0i li\u1ec7u Dynamic Bonding Curve","text":"<p>T\u00e0i li\u1ec7u to\u00e0n di\u1ec7n cho ch\u01b0\u01a1ng tr\u00ecnh Solana Dynamic Bonding Curve.</p>"},{"location":"vi/#tong-quan-chuong-trinh","title":"T\u1ed5ng quan ch\u01b0\u01a1ng tr\u00ecnh","text":"<p>Dynamic Bonding Curve l\u00e0 m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh Solana tri\u1ec3n khai automated market maker (AMM) v\u1edbi: - \u0110\u01b0\u1eddng cong thanh kho\u1ea3n t\u1eadp trung t\u1eebng ph\u1ea7n - H\u1ec7 th\u1ed1ng ph\u00ed \u0111\u1ed9ng v\u1edbi \u0111i\u1ec1u ch\u1ec9nh d\u1ef1a tr\u00ean bi\u1ebfn \u0111\u1ed9ng - B\u1ea3o v\u1ec7 ch\u1ed1ng sniper th\u00f4ng qua rate limiters - T\u1ef1 \u0111\u1ed9ng di chuy\u1ec3n thanh kho\u1ea3n \u0111\u1ebfn Meteora DEX - Ph\u00e2n ph\u1ed1i ph\u00ed \u0111a b\u00ean (giao th\u1ee9c, \u0111\u1ed1i t\u00e1c, ng\u01b0\u1eddi t\u1ea1o, gi\u1edbi thi\u1ec7u)</p> <p>Program ID: <code>dbcij3LWUppWqq96dh6gJWwBifmcGfLSB5D4DuSMaqN</code></p>"},{"location":"vi/#cau-truc-tai-lieu","title":"C\u1ea5u tr\u00fac t\u00e0i li\u1ec7u","text":""},{"location":"vi/#bat-au-nhanh","title":"B\u1eaft \u0111\u1ea7u nhanh","text":"<p>M\u1edbi v\u1edbi bonding curves? B\u1eaft \u0111\u1ea7u t\u1ea1i \u0111\u00e2y: 1. 00-overview.md - Gi\u1edbi thi\u1ec7u t\u1ed5ng quan 2. 05-workflows.md - C\u00e1c thao t\u00e1c ph\u1ed5 bi\u1ebfn v\u00e0 v\u00ed d\u1ee5 3. 01-instructions.md - Tham chi\u1ebfu l\u1ec7nh</p>"},{"location":"vi/#tai-lieu-cot-loi","title":"T\u00e0i li\u1ec7u c\u1ed1t l\u00f5i","text":"T\u1ec7p M\u00f4 t\u1ea3 D\u00e0nh cho 00-overview.md T\u1ed5ng quan, ki\u1ebfn tr\u00fac v\u00e0 kh\u00e1i ni\u1ec7m ch\u00ednh T\u1ea5t c\u1ea3 m\u1ecdi ng\u01b0\u1eddi 01-instructions.md Tham chi\u1ebfu l\u1ec7nh \u0111\u1ea7y \u0111\u1ee7 (25 l\u1ec7nh) L\u1eadp tr\u00ecnh vi\u00ean 02-state-accounts.md C\u1ea5u tr\u00fac t\u00e0i kho\u1ea3n v\u00e0 PDAs L\u1eadp tr\u00ecnh vi\u00ean 03-bonding-curve-math.md C\u00f4ng th\u1ee9c to\u00e1n h\u1ecdc L\u1eadp tr\u00ecnh vi\u00ean n\u00e2ng cao 04-fee-system.md C\u01a1 ch\u1ebf ph\u00ed v\u00e0 ph\u00e2n ph\u1ed1i T\u00edch h\u1ee3p, trader 05-workflows.md H\u01b0\u1edbng d\u1eabn t\u1eebng b\u01b0\u1edbc v\u1edbi v\u00ed d\u1ee5 code L\u1eadp tr\u00ecnh vi\u00ean 06-migration.md Chi ti\u1ebft h\u1ec7 th\u1ed1ng di chuy\u1ec3n Ng\u01b0\u1eddi d\u00f9ng n\u00e2ng cao"},{"location":"vi/#tinh-nang-chinh","title":"T\u00ednh n\u0103ng ch\u00ednh","text":""},{"location":"vi/#1-bonding-curve","title":"1. Bonding Curve","text":"<ul> <li>L\u00ean \u0111\u1ebfn 20 \u0111i\u1ec3m gi\u00e1 cho thi\u1ebft k\u1ebf \u0111\u01b0\u1eddng cong linh ho\u1ea1t</li> <li>M\u00f4 h\u00ecnh thanh kho\u1ea3n t\u1eadp trung (ki\u1ec3u Uniswap V3)</li> <li>To\u00e1n h\u1ecdc fixed-point Q64.64 cho \u0111\u1ed9 ch\u00ednh x\u00e1c</li> <li>H\u1ed7 tr\u1ee3 m\u1ecdi d\u1ea3i gi\u00e1 ($0.000001 \u0111\u1ebfn $1,000,000)</li> </ul> <p>T\u00ecm hi\u1ec3u th\u00eam: 03-bonding-curve-math.md</p>"},{"location":"vi/#2-phi-ong","title":"2. Ph\u00ed \u0111\u1ed9ng","text":"<ul> <li>Ph\u00ed c\u01a1 b\u1ea3n: Gi\u1ea3m theo th\u1eddi gian (tuy\u1ebfn t\u00ednh ho\u1eb7c m\u0169)</li> <li>Ph\u00ed \u0111\u1ed9ng: T\u0103ng theo bi\u1ebfn \u0111\u1ed9ng</li> <li>Rate limiter: B\u1ea3o v\u1ec7 ch\u1ed1ng sniper</li> <li>T\u1ed5ng ph\u00ed: Gi\u1edbi h\u1ea1n t\u1ed1i \u0111a 99%</li> </ul> <p>T\u00ecm hi\u1ec3u th\u00eam: 04-fee-system.md</p>"},{"location":"vi/#3-phan-phoi-a-ben","title":"3. Ph\u00e2n ph\u1ed1i \u0111a b\u00ean","text":"<pre><code>T\u1ed5ng ph\u00ed (100%)\n\u251c\u2500 Giao th\u1ee9c (20%)\n\u2502  \u251c\u2500 Giao th\u1ee9c (80%)\n\u2502  \u2514\u2500 Gi\u1edbi thi\u1ec7u (20%)\n\u2514\u2500 Giao d\u1ecbch (80%)\n   \u251c\u2500 \u0110\u1ed1i t\u00e1c (50%)\n   \u2514\u2500 Ng\u01b0\u1eddi t\u1ea1o (50%)\n</code></pre> <p>T\u00ecm hi\u1ec3u th\u00eam: 04-fee-system.md#4-fee-distribution</p>"},{"location":"vi/#4-he-thong-di-chuyen","title":"4. H\u1ec7 th\u1ed1ng di chuy\u1ec3n","text":"<ul> <li>T\u1ef1 \u0111\u1ed9ng di chuy\u1ec3n \u0111\u1ebfn Meteora DAMM ho\u1eb7c DAMM V2</li> <li>Vesting LP token v\u1edbi l\u1ecbch tr\u00ecnh t\u00f9y ch\u1ec9nh</li> <li>Ph\u00e2n ph\u1ed1i d\u01b0 th\u1eeba (80% cho \u0111\u1ed1i t\u00e1c/ng\u01b0\u1eddi t\u1ea1o, 20% cho giao th\u1ee9c)</li> <li>Ph\u00ed di chuy\u1ec3n c\u00f3 th\u1ec3 c\u1ea5u h\u00ecnh (0.25% \u0111\u1ebfn 6%)</li> </ul> <p>T\u00ecm hi\u1ec3u th\u00eam: 06-migration.md</p>"},{"location":"vi/#danh-muc-lenh","title":"Danh m\u1ee5c l\u1ec7nh","text":""},{"location":"vi/#admin-4-lenh","title":"Admin (4 l\u1ec7nh)","text":"<ul> <li><code>create_claim_fee_operator</code> - \u1ee6y quy\u1ec1n thu ph\u00ed</li> <li><code>close_claim_fee_operator</code> - Thu h\u1ed3i \u1ee7y quy\u1ec1n</li> <li><code>claim_protocol_fee</code> - Thu ph\u00ed giao th\u1ee9c</li> <li><code>protocol_withdraw_surplus</code> - R\u00fat d\u01b0 th\u1eeba sau di chuy\u1ec3n</li> </ul>"},{"location":"vi/#oi-tac-4-lenh","title":"\u0110\u1ed1i t\u00e1c (4 l\u1ec7nh)","text":"<ul> <li><code>create_partner_metadata</code> - T\u1ea1o th\u00f4ng tin \u0111\u1ed1i t\u00e1c</li> <li><code>create_config</code> - T\u1ea1o c\u1ea5u h\u00ecnh pool</li> <li><code>claim_trading_fee</code> - Thu ph\u00ed giao d\u1ecbch \u0111\u1ed1i t\u00e1c</li> <li><code>partner_withdraw_surplus</code> - R\u00fat d\u01b0 th\u1eeba</li> </ul>"},{"location":"vi/#nguoi-tao-5-lenh","title":"Ng\u01b0\u1eddi t\u1ea1o (5 l\u1ec7nh)","text":"<ul> <li><code>initialize_virtual_pool_with_spl_token</code> - T\u1ea1o pool (SPL)</li> <li><code>initialize_virtual_pool_with_token2022</code> - T\u1ea1o pool (Token-2022)</li> <li><code>create_virtual_pool_metadata</code> - Th\u00eam metadata pool</li> <li><code>claim_creator_trading_fee</code> - Thu ph\u00ed ng\u01b0\u1eddi t\u1ea1o</li> <li><code>creator_withdraw_surplus</code> - R\u00fat d\u01b0 th\u1eeba</li> <li><code>transfer_pool_creator</code> - Chuy\u1ec3n quy\u1ec1n s\u1edf h\u1eefu</li> </ul>"},{"location":"vi/#giao-dich-2-lenh","title":"Giao d\u1ecbch (2 l\u1ec7nh)","text":"<ul> <li><code>swap</code> - Swap exact-in c\u0169</li> <li><code>swap2</code> - Swap n\u00e2ng cao (exact-in, exact-out, partial-fill)</li> </ul>"},{"location":"vi/#di-chuyen-8-lenh","title":"Di chuy\u1ec3n (8 l\u1ec7nh)","text":"<ul> <li><code>create_locker</code> - T\u1ea1o locker LP token</li> <li><code>withdraw_leftover</code> - R\u00fat token c\u01a1 s\u1edf d\u01b0 th\u1eeba</li> <li><code>withdraw_migration_fee</code> - Thu ph\u00ed di chuy\u1ec3n</li> <li>Di chuy\u1ec3n Meteora DAMM (4 l\u1ec7nh)</li> <li>Di chuy\u1ec3n DAMM V2 (2 l\u1ec7nh)</li> </ul> <p>Tham chi\u1ebfu \u0111\u1ea7y \u0111\u1ee7: 01-instructions.md</p>"},{"location":"vi/#tai-khoan-trang-thai","title":"T\u00e0i kho\u1ea3n tr\u1ea1ng th\u00e1i","text":"T\u00e0i kho\u1ea3n K\u00edch th\u01b0\u1edbc M\u1ee5c \u0111\u00edch PoolConfig 1040 bytes C\u1ea5u h\u00ecnh pool b\u1ea5t bi\u1ebfn VirtualPool 416 bytes Tr\u1ea1ng th\u00e1i pool c\u00f3 th\u1ec3 thay \u0111\u1ed5i PartnerMetadata Bi\u1ebfn \u0111\u1ed5i Th\u00f4ng tin \u0111\u1ed1i t\u00e1c VirtualPoolMetadata Bi\u1ebfn \u0111\u1ed5i Metadata pool ClaimFeeOperator 40 bytes \u1ee6y quy\u1ec1n thu ph\u00ed <p>Tham chi\u1ebfu \u0111\u1ea7y \u0111\u1ee7: 02-state-accounts.md</p>"},{"location":"vi/#quy-trinh-pho-bien","title":"Quy tr\u00ecnh ph\u1ed5 bi\u1ebfn","text":""},{"location":"vi/#tao-pool","title":"T\u1ea1o Pool","text":"<pre><code>// 1. \u0110\u1ed1i t\u00e1c: T\u1ea1o c\u1ea5u h\u00ecnh\nawait program.methods.createConfig(params)...\n\n// 2. Ng\u01b0\u1eddi t\u1ea1o: Kh\u1edfi t\u1ea1o pool\nawait program.methods.initializeVirtualPoolWithSplToken(metadata)...\n</code></pre> <p>H\u01b0\u1edbng d\u1eabn: 05-workflows.md#1-pool-creation-workflow</p>"},{"location":"vi/#giao-dich","title":"Giao d\u1ecbch","text":"<pre><code>// Mua token b\u1eb1ng USDC\nawait program.methods.swap2({\n    amount0: inputAmount,      // USDC v\u00e0o\n    amount1: minOutputAmount,  // Token t\u1ed1i thi\u1ec3u ra\n    swapMode: 0,               // ExactIn\n})...\n</code></pre> <p>H\u01b0\u1edbng d\u1eabn: 05-workflows.md#2-trading-workflow</p>"},{"location":"vi/#di-chuyen","title":"Di chuy\u1ec3n","text":"<pre><code>// 1. T\u1ea1o locker\nawait program.methods.createLocker()...\n\n// 2. T\u1ea1o metadata\nawait program.methods.migrationDammV2CreateMetadata()...\n\n// 3. Th\u1ef1c hi\u1ec7n di chuy\u1ec3n\nawait program.methods.migrationDammV2()...\n</code></pre> <p>H\u01b0\u1edbng d\u1eabn: 05-workflows.md#4-migration-workflow</p>"},{"location":"vi/#chi-tiet-toan-hoc","title":"Chi ti\u1ebft to\u00e1n h\u1ecdc","text":""},{"location":"vi/#cong-thuc-constant-product","title":"C\u00f4ng th\u1ee9c Constant Product","text":"<p>Cho m\u1ed7i \u0111o\u1ea1n thanh kho\u1ea3n: <pre><code>x * y = L\u00b2\n</code></pre></p> <p>Trong \u0111\u00f3: - <code>x</code> = s\u1ed1 l\u01b0\u1ee3ng token c\u01a1 s\u1edf - <code>y</code> = s\u1ed1 l\u01b0\u1ee3ng token quote - <code>L</code> = h\u1eb1ng s\u1ed1 thanh kho\u1ea3n</p>"},{"location":"vi/#tinh-toan-gia","title":"T\u00ednh to\u00e1n gi\u00e1","text":"<p>Gi\u00e1 \u0111\u01b0\u1ee3c l\u01b0u d\u01b0\u1edbi d\u1ea1ng sqrt(price) \u1edf \u0111\u1ecbnh d\u1ea1ng Q64.64: <pre><code>sqrt_price = \u221a(price_quote_per_base) * 2^64\n</code></pre></p>"},{"location":"vi/#cong-thuc-so-luong-token","title":"C\u00f4ng th\u1ee9c s\u1ed1 l\u01b0\u1ee3ng token","text":"<p>Token c\u01a1 s\u1edf: <pre><code>\u0394x = L * (1/\u221aP_lower - 1/\u221aP_upper)\n</code></pre></p> <p>Token quote: <pre><code>\u0394y = L * (\u221aP_upper - \u221aP_lower)\n</code></pre></p> <p>Chi ti\u1ebft \u0111\u1ea7y \u0111\u1ee7: 03-bonding-curve-math.md</p>"},{"location":"vi/#tinh-toan-phi","title":"T\u00ednh to\u00e1n ph\u00ed","text":""},{"location":"vi/#phi-co-ban-giam-theo-thoi-gian","title":"Ph\u00ed c\u01a1 b\u1ea3n (Gi\u1ea3m theo th\u1eddi gian)","text":"<p>Tuy\u1ebfn t\u00ednh: <pre><code>fee(t) = cliff_fee - (periods * reduction_factor)\n</code></pre></p> <p>M\u0169: <pre><code>fee(t) = cliff_fee * (1 - reduction_factor/10000)^periods\n</code></pre></p>"},{"location":"vi/#phi-ong-bien-ong","title":"Ph\u00ed \u0111\u1ed9ng (Bi\u1ebfn \u0111\u1ed9ng)","text":"<pre><code>variable_fee = (volatility * bin_step)^2 * control / 10^11\ntotal_fee = base_fee + variable_fee\n</code></pre>"},{"location":"vi/#rate-limiter-chong-sniper","title":"Rate Limiter (Ch\u1ed1ng Sniper)","text":"<pre><code>penalty = (volume / reference) * increment_bps\neffective_fee = base_fee + penalty\n</code></pre> <p>Chi ti\u1ebft \u0111\u1ea7y \u0111\u1ee7: 04-fee-system.md</p>"},{"location":"vi/#kien-truc-chuong-trinh","title":"Ki\u1ebfn tr\u00fac ch\u01b0\u01a1ng tr\u00ecnh","text":"<pre><code>programs/\n\u2514\u2500\u2500 dynamic-bonding-curve/\n    \u251c\u2500\u2500 src/\n    \u2502   \u251c\u2500\u2500 lib.rs                    # \u0110i\u1ec3m v\u00e0o ch\u01b0\u01a1ng tr\u00ecnh (25 l\u1ec7nh)\n    \u2502   \u251c\u2500\u2500 instructions/              # X\u1eed l\u00fd l\u1ec7nh\n    \u2502   \u2502   \u251c\u2500\u2500 admin/                # Thao t\u00e1c admin\n    \u2502   \u2502   \u251c\u2500\u2500 partner/              # Thao t\u00e1c \u0111\u1ed1i t\u00e1c\n    \u2502   \u2502   \u251c\u2500\u2500 creator/              # Thao t\u00e1c ng\u01b0\u1eddi t\u1ea1o\n    \u2502   \u2502   \u251c\u2500\u2500 swap/                 # Logic giao d\u1ecbch\n    \u2502   \u2502   \u251c\u2500\u2500 initialize_pool/      # T\u1ea1o pool\n    \u2502   \u2502   \u2514\u2500\u2500 migration/            # H\u1ec7 th\u1ed1ng di chuy\u1ec3n\n    \u2502   \u251c\u2500\u2500 state/                    # C\u1ea5u tr\u00fac t\u00e0i kho\u1ea3n\n    \u2502   \u251c\u2500\u2500 math/                     # Ph\u00e9p to\u00e1n\n    \u2502   \u251c\u2500\u2500 curve.rs                  # Logic bonding curve\n    \u2502   \u251c\u2500\u2500 base_fee/                 # Fee schedulers\n    \u2502   \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"vi/#hang-so","title":"H\u1eb1ng s\u1ed1","text":""},{"location":"vi/#gioi-han-gia","title":"Gi\u1edbi h\u1ea1n gi\u00e1","text":"<pre><code>MIN_SQRT_PRICE: u128 = 4_295_048_016              // ~$0.000001\nMAX_SQRT_PRICE: u128 = 79_226_673_521_066_979_... // ~$1,000,000\n</code></pre>"},{"location":"vi/#gioi-han-phi","title":"Gi\u1edbi h\u1ea1n ph\u00ed","text":"<pre><code>FEE_DENOMINATOR: u64 = 1_000_000_000   // \u0110\u1ed9 ch\u00ednh x\u00e1c 9 ch\u1eef s\u1ed1\nMAX_FEE_BPS: u64 = 9900                // 99%\nMIN_FEE_BPS: u64 = 1                   // 0.01%\nPROTOCOL_FEE_PERCENT: u8 = 20          // 20%\n</code></pre>"},{"location":"vi/#tai-nguyen","title":"T\u00e0i nguy\u00ean","text":""},{"location":"vi/#tai-lieu-ben-ngoai","title":"T\u00e0i li\u1ec7u b\u00ean ngo\u00e0i","text":"<ul> <li>T\u00e0i li\u1ec7u Meteora DAMM</li> <li>Whitepaper Uniswap V3</li> <li>T\u00e0i li\u1ec7u Anchor</li> <li>T\u00e0i li\u1ec7u Solana</li> </ul>"},{"location":"vi/#ho-tro","title":"H\u1ed7 tr\u1ee3","text":"<p>\u0110\u1ed1i v\u1edbi c\u00e2u h\u1ecfi v\u00e0 v\u1ea5n \u0111\u1ec1: - GitHub Issues: Repository issues - T\u00e0i li\u1ec7u: Th\u01b0 m\u1ee5c n\u00e0y - V\u00ed d\u1ee5 code: Th\u01b0 m\u1ee5c <code>tests/</code></p>"},{"location":"vi/#the-tham-chieu-nhanh","title":"Th\u1ebb tham chi\u1ebfu nhanh","text":""},{"location":"vi/#pdas-can-thiet","title":"PDAs c\u1ea7n thi\u1ebft","text":"<pre><code>Pool:     [\"pool\", base_mint, config]\nConfig:   [\"config\", config_index]\nVault:    [\"token_vault\", pool, mint]\nAuthority: [\"pool_authority\"]\n</code></pre>"},{"location":"vi/#thao-tac-pho-bien","title":"Thao t\u00e1c ph\u1ed5 bi\u1ebfn","text":"<pre><code>// T\u1ea1o pool\ncreateConfig() \u2192 initializePool()\n\n// Giao d\u1ecbch\nswap2({ amount0, amount1, swapMode: 0 })\n\n// Thu ph\u00ed\nclaimTradingFee(maxBase, maxQuote)\n\n// Di chuy\u1ec3n\ncreateLocker() \u2192 createMetadata() \u2192 migrate()\n</code></pre>"},{"location":"vi/#gioi-han-quan-trong","title":"Gi\u1edbi h\u1ea1n quan tr\u1ecdng","text":"<pre><code>\u0110i\u1ec3m \u0111\u01b0\u1eddng cong t\u1ed1i \u0111a: 20\nPh\u00ed t\u1ed1i \u0111a: 99%\nPh\u00ed t\u1ed1i thi\u1ec3u: 0.01%\nD\u1ea3i gi\u00e1: $0.000001 \u0111\u1ebfn $1,000,000\n</code></pre> <p>C\u1eadp nh\u1eadt l\u1ea7n cu\u1ed1i: 2025-10-23</p>"},{"location":"vi/00-overview/","title":"Dynamic Bonding Curve - T\u1ed5ng quan","text":""},{"location":"vi/00-overview/#no-la-gi","title":"N\u00f3 l\u00e0 g\u00ec?","text":"<p>Dynamic Bonding Curve l\u00e0 m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh Solana tri\u1ec3n khai automated market maker (AMM) v\u1edbi c\u01a1 ch\u1ebf bonding curve. N\u00f3 \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf \u0111\u1ec3 ra m\u1eaft token m\u1edbi v\u1edbi c\u01a1 ch\u1ebf kh\u00e1m ph\u00e1 gi\u00e1 c\u00f4ng b\u1eb1ng v\u00e0 t\u1ef1 \u0111\u1ed9ng di chuy\u1ec3n thanh kho\u1ea3n \u0111\u1ebfn c\u00e1c DEX \u0111\u00e3 \u0111\u01b0\u1ee3c thi\u1ebft l\u1eadp.</p>"},{"location":"vi/00-overview/#khai-niem-chinh","title":"Kh\u00e1i ni\u1ec7m ch\u00ednh","text":""},{"location":"vi/00-overview/#1-bonding-curve","title":"1. Bonding Curve","text":"<p>Bonding curve l\u00e0 m\u1ed1i quan h\u1ec7 to\u00e1n h\u1ecdc gi\u1eefa gi\u00e1 token v\u00e0 ngu\u1ed3n cung. Khi mua nhi\u1ec1u token h\u01a1n, gi\u00e1 t\u0103ng theo m\u1ed9t \u0111\u01b0\u1eddng cong \u0111\u01b0\u1ee3c x\u00e1c \u0111\u1ecbnh tr\u01b0\u1edbc. Ch\u01b0\u01a1ng tr\u00ecnh n\u00e0y tri\u1ec3n khai bonding curve thanh kho\u1ea3n t\u1eadp trung t\u1eebng ph\u1ea7n, t\u01b0\u01a1ng t\u1ef1 nh\u01b0 Uniswap V3.</p>"},{"location":"vi/00-overview/#2-virtual-pool","title":"2. Virtual Pool","text":"<p>C\u01a1 ch\u1ebf giao d\u1ecbch c\u1ed1t l\u00f5i s\u1eed d\u1ee5ng \"virtual pools\" - c\u00e1c t\u00e0i kho\u1ea3n on-chain duy tr\u00ec: - D\u1ef1 tr\u1eef token c\u01a1 s\u1edf (token m\u1edbi \u0111\u01b0\u1ee3c ra m\u1eaft) - D\u1ef1 tr\u1eef token quote (th\u01b0\u1eddng l\u00e0 USDC, SOL, ho\u1eb7c token \u0111\u00e3 \u0111\u01b0\u1ee3c thi\u1ebft l\u1eadp kh\u00e1c) - Gi\u00e1 hi\u1ec7n t\u1ea1i (\u0111\u01b0\u1ee3c l\u01b0u d\u01b0\u1edbi d\u1ea1ng sqrt_price cho \u0111\u1ed9 ch\u00ednh x\u00e1c to\u00e1n h\u1ecdc) - T\u00edch l\u0169y v\u00e0 ph\u00e2n ph\u1ed1i ph\u00ed</p>"},{"location":"vi/00-overview/#3-phi-ong","title":"3. Ph\u00ed \u0111\u1ed9ng","text":"<p>Ch\u01b0\u01a1ng tr\u00ecnh tri\u1ec3n khai h\u1ec7 th\u1ed1ng ph\u00ed tinh vi k\u1ebft h\u1ee3p: - Ph\u00ed c\u01a1 b\u1ea3n: Ph\u00ed d\u1ef1a tr\u00ean th\u1eddi gian c\u00f3 th\u1ec3 gi\u1ea3m theo th\u1eddi gian (gi\u1ea3m tuy\u1ebfn t\u00ednh ho\u1eb7c m\u0169) - Ph\u00ed \u0111\u1ed9ng: Ph\u00ed d\u1ef1a tr\u00ean bi\u1ebfn \u0111\u1ed9ng t\u0103ng trong giao d\u1ecbch ho\u1ea1t \u0111\u1ed9ng cao - Rate limiter: B\u1ea3o v\u1ec7 ch\u1ed1ng sniper l\u00e0m t\u0103ng ph\u00ed cho giao d\u1ecbch nhanh</p>"},{"location":"vi/00-overview/#4-he-thong-di-chuyen","title":"4. H\u1ec7 th\u1ed1ng di chuy\u1ec3n","text":"<p>Khi bonding curve ho\u00e0n th\u00e0nh (\u0111\u1ea1t m\u1ee5c ti\u00eau), thanh kho\u1ea3n t\u00edch l\u0169y c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c di chuy\u1ec3n \u0111\u1ebfn: - Meteora Dynamic AMM (DAMM V1) - Meteora Dynamic AMM V2 (DAMM V2)</p> <p>Vi\u1ec7c di chuy\u1ec3n bao g\u1ed3m c\u01a1 ch\u1ebf kh\u00f3a LP token \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o thanh kho\u1ea3n d\u00e0i h\u1ea1n.</p>"},{"location":"vi/00-overview/#kien-truc-chuong-trinh","title":"Ki\u1ebfn tr\u00fac ch\u01b0\u01a1ng tr\u00ecnh","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              Ch\u01b0\u01a1ng tr\u00ecnh Dynamic Bonding Curve              \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                              \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u2502\n\u2502  \u2502   Config     \u2502  \u2502 Virtual Pool \u2502  \u2502   Metadata   \u2502     \u2502\n\u2502  \u2502              \u2502  \u2502              \u2502  \u2502              \u2502     \u2502\n\u2502  \u2502 \u2022 Tham s\u1ed1 ph\u00ed\u2502  \u2502 \u2022 D\u1ef1 tr\u1eef     \u2502  \u2502 \u2022 \u0110\u1ed1i t\u00e1c    \u2502     \u2502\n\u2502  \u2502 \u2022 \u0110\u01b0\u1eddng cong \u2502  \u2502 \u2022 Gi\u00e1        \u2502  \u2502 \u2022 Ng\u01b0\u1eddi t\u1ea1o  \u2502     \u2502\n\u2502  \u2502 \u2022 Di chuy\u1ec3n  \u2502  \u2502 \u2022 Ph\u00ed        \u2502  \u2502 \u2022 Th\u00f4ng tin  \u2502     \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2502\n\u2502                                                              \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502           X\u1eed l\u00fd l\u1ec7nh (Instructions)                  \u2502  \u2502\n\u2502  \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524  \u2502\n\u2502  \u2502 \u2022 T\u1ea1o &amp; Kh\u1edfi t\u1ea1o Pool                                \u2502  \u2502\n\u2502  \u2502 \u2022 Thao t\u00e1c Swap (Exact In/Out, Partial Fill)        \u2502  \u2502\n\u2502  \u2502 \u2022 Qu\u1ea3n l\u00fd &amp; Thu ph\u00ed                                  \u2502  \u2502\n\u2502  \u2502 \u2022 Di chuy\u1ec3n &amp; Kh\u00f3a thanh kho\u1ea3n                       \u2502  \u2502\n\u2502  \u2502 \u2022 Thao t\u00e1c Admin                                     \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                                                              \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502              Logic To\u00e1n h\u1ecdc &amp; \u0110\u01b0\u1eddng cong              \u2502  \u2502\n\u2502  \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524  \u2502\n\u2502  \u2502 \u2022 T\u00ednh to\u00e1n sqrt price (x64.64 fixed-point)          \u2502  \u2502\n\u2502  \u2502 \u2022 Ph\u00e2n ph\u1ed1i thanh kho\u1ea3n theo \u0111i\u1ec3m gi\u00e1                \u2502  \u2502\n\u2502  \u2502 \u2022 T\u00ednh to\u00e1n ph\u00ed (c\u01a1 b\u1ea3n + \u0111\u1ed9ng + rate limiter)       \u2502  \u2502\n\u2502  \u2502 \u2022 B\u1ea3o v\u1ec7 slippage                                    \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                                                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"vi/00-overview/#tinh-nang-chinh","title":"T\u00ednh n\u0103ng ch\u00ednh","text":"<ol> <li>C\u01a1 ch\u1ebf Ra m\u1eaft C\u00f4ng b\u1eb1ng: Bonding curves \u0111\u1ea3m b\u1ea3o kh\u00e1m ph\u00e1 gi\u00e1 minh b\u1ea1ch</li> <li>B\u1ea3o v\u1ec7 Ch\u1ed1ng Sniper: Rate limiters ng\u0103n ch\u1eb7n front-running v\u00e0 giao d\u1ecbch nhanh</li> <li>H\u1ec7 th\u1ed1ng Ph\u00ed \u0110\u1ed9ng: Ph\u00ed th\u00edch \u1ee9ng v\u1edbi bi\u1ebfn \u0111\u1ed9ng th\u1ecb tr\u01b0\u1eddng</li> <li>Di chuy\u1ec3n T\u1ef1 \u0111\u1ed9ng: Chuy\u1ec3n \u0111\u1ed5i li\u1ec1n m\u1ea1ch \u0111\u1ebfn c\u00e1c DEX \u0111\u00e3 \u0111\u01b0\u1ee3c thi\u1ebft l\u1eadp</li> <li>Ph\u00e2n ph\u1ed1i Ph\u00ed \u0110a b\u00ean: Ph\u00e2n ph\u1ed1i c\u00f4ng b\u1eb1ng gi\u1eefa giao th\u1ee9c, ng\u01b0\u1eddi t\u1ea1o v\u00e0 \u0111\u1ed1i t\u00e1c</li> <li>T\u00ednh linh ho\u1ea1t Token: H\u1ed7 tr\u1ee3 c\u1ea3 SPL Token v\u00e0 Token-2022</li> <li>Vesting &amp; Kh\u00f3a: C\u01a1 ch\u1ebf vesting token v\u00e0 kh\u00f3a LP token t\u00edch h\u1ee3p</li> </ol>"},{"location":"vi/00-overview/#cac-ben-lien-quan","title":"C\u00e1c b\u00ean li\u00ean quan","text":""},{"location":"vi/00-overview/#1-giao-thuc-admin","title":"1. Giao th\u1ee9c (Admin)","text":"<ul> <li>Thu ph\u00ed giao th\u1ee9c</li> <li>C\u00f3 th\u1ec3 r\u00fat d\u01b0 th\u1eeba sau khi di chuy\u1ec3n</li> <li>Qu\u1ea3n l\u00fd c\u00e1c claim operators</li> </ul>"},{"location":"vi/00-overview/#2-oi-tac","title":"2. \u0110\u1ed1i t\u00e1c","text":"<ul> <li>N\u1ec1n t\u1ea3ng ho\u1eb7c d\u1ecbch v\u1ee5 t\u00edch h\u1ee3p bonding curve</li> <li>Nh\u1eadn ph\u1ea7n chia s\u1ebb ph\u00ed giao d\u1ecbch v\u00e0 ph\u00ed di chuy\u1ec3n</li> <li>C\u00f3 th\u1ec3 c\u1ea5u h\u00ecnh tham s\u1ed1 pool</li> <li>Nh\u1eadn LP tokens sau khi di chuy\u1ec3n</li> </ul>"},{"location":"vi/00-overview/#3-nguoi-tao","title":"3. Ng\u01b0\u1eddi t\u1ea1o","text":"<ul> <li>Ng\u01b0\u1eddi t\u1ea1o token ra m\u1eaft bonding curve</li> <li>Nh\u1eadn ph\u1ea7n chia s\u1ebb ph\u00ed giao d\u1ecbch</li> <li>C\u00f3 th\u1ec3 thu ph\u00ed di chuy\u1ec3n</li> <li>Nh\u1eadn LP tokens sau khi di chuy\u1ec3n</li> <li>C\u00f3 th\u1ec3 chuy\u1ec3n quy\u1ec1n s\u1edf h\u1eefu</li> </ul>"},{"location":"vi/00-overview/#4-traders","title":"4. Traders","text":"<ul> <li>Mua v\u00e0 b\u00e1n token theo bonding curve</li> <li>Tr\u1ea3 ph\u00ed giao d\u1ecbch</li> <li>C\u00f3 th\u1ec3 cung c\u1ea5p gi\u1edbi thi\u1ec7u \u0111\u1ec3 chia s\u1ebb ph\u00ed</li> </ul>"},{"location":"vi/00-overview/#buoc-tiep-theo","title":"B\u01b0\u1edbc ti\u1ebfp theo","text":"<p>Ti\u1ebfp t\u1ee5c \u0111\u1ecdc: - 01-instructions.md - Tham chi\u1ebfu l\u1ec7nh chi ti\u1ebft - 02-state-accounts.md - T\u00e0i li\u1ec7u c\u1ea5u tr\u00fac t\u00e0i kho\u1ea3n - 03-bonding-curve-math.md - Chi ti\u1ebft to\u00e1n h\u1ecdc - 04-fee-system.md - T\u00ednh to\u00e1n v\u00e0 ph\u00e2n ph\u1ed1i ph\u00ed - 05-workflows.md - Quy tr\u00ecnh v\u00e0 thao t\u00e1c ph\u1ed5 bi\u1ebfn - 06-migration.md - Chi ti\u1ebft quy tr\u00ecnh di chuy\u1ec3n</p>"},{"location":"vi/SETUP/","title":"H\u01b0\u1edbng d\u1eabn C\u00e0i \u0111\u1eb7t GitHub Pages","text":"<p>H\u01b0\u1edbng d\u1eabn n\u00e0y s\u1ebd gi\u00fap b\u1ea1n ho\u00e0n t\u1ea5t thi\u1ebft l\u1eadp \u0111\u1ec3 host t\u00e0i li\u1ec7u t\u1ea1i https://docs.go.meme</p>"},{"location":"vi/SETUP/#nhung-gi-a-hoan-thanh","title":"\u2705 Nh\u1eefng g\u00ec \u0111\u00e3 Ho\u00e0n th\u00e0nh","text":"<ul> <li>\u2705 C\u00e1c t\u1ec7p t\u00e0i li\u1ec7u \u0111\u00e3 \u0111\u01b0\u1ee3c t\u1ea1o v\u00e0 commit</li> <li>\u2705 C\u1ea5u h\u00ecnh MkDocs v\u1edbi Material theme</li> <li>\u2705 GitHub Actions workflow cho t\u1ef1 \u0111\u1ed9ng tri\u1ec3n khai</li> <li>\u2705 T\u1ec7p CNAME cho custom domain</li> <li>\u2705 Repository \u0111\u00e3 \u0111\u01b0\u1ee3c push l\u00ean GitHub</li> </ul>"},{"location":"vi/SETUP/#cac-buoc-tiep-theo","title":"\ud83d\udccb C\u00e1c B\u01b0\u1edbc Ti\u1ebfp theo","text":""},{"location":"vi/SETUP/#1-bat-github-pages","title":"1. B\u1eadt GitHub Pages","text":"<ol> <li>Truy c\u1eadp repository c\u1ee7a b\u1ea1n: https://github.com/go-meme/gomeme-docs</li> <li>Nh\u1ea5p Settings \u2192 Pages (trong thanh b\u00ean tr\u00e1i)</li> <li>D\u01b0\u1edbi \"Build and deployment\":</li> <li>Source: Ch\u1ecdn \"Deploy from a branch\"</li> <li>Branch: Ch\u1ecdn <code>gh-pages</code> v\u00e0 <code>/ (root)</code></li> <li>Nh\u1ea5p Save</li> </ol>"},{"location":"vi/SETUP/#2-cau-hinh-custom-domain-trong-github","title":"2. C\u1ea5u h\u00ecnh Custom Domain trong GitHub","text":"<ol> <li>V\u1eabn \u1edf Settings \u2192 Pages</li> <li>D\u01b0\u1edbi \"Custom domain\":</li> <li>Nh\u1eadp: <code>docs.go.meme</code></li> <li>Nh\u1ea5p Save</li> <li>\u0110\u1ee3i ki\u1ec3m tra DNS (c\u00f3 th\u1ec3 m\u1ea5t v\u00e0i ph\u00fat)</li> <li>Khi \u0111\u00e3 x\u00e1c minh, ch\u1ecdn \"Enforce HTTPS\"</li> </ol>"},{"location":"vi/SETUP/#3-cau-hinh-dns-trong-cloudflare","title":"3. C\u1ea5u h\u00ecnh DNS trong Cloudflare","text":"<ol> <li>Truy c\u1eadp Cloudflare dashboard</li> <li>Ch\u1ecdn domain <code>go.meme</code> c\u1ee7a b\u1ea1n</li> <li>Nh\u1ea5p DNS \u2192 Records</li> <li>Th\u00eam/C\u1eadp nh\u1eadt c\u00e1c b\u1ea3n ghi sau:</li> </ol> <p>T\u00f9y ch\u1ecdn A: S\u1eed d\u1ee5ng CNAME (Khuy\u1ebfn ngh\u1ecb) <pre><code>Type: CNAME\nName: docs\nTarget: go-meme.github.io\nProxy status: Proxied (\u0111\u00e1m m\u00e2y m\u00e0u cam)\nTTL: Auto\n</code></pre></p> <p>T\u00f9y ch\u1ecdn B: S\u1eed d\u1ee5ng A Records (Thay th\u1ebf) <pre><code>Type: A\nName: docs\nIPv4 address: 185.199.108.153\nProxy status: Proxied\n</code></pre></p> <p>Th\u00eam c\u00e1c A records b\u1ed5 sung cho:    - 185.199.109.153    - 185.199.110.153    - 185.199.111.153</p> <ol> <li>L\u01b0u b\u1ea3n ghi DNS</li> </ol>"},{"location":"vi/SETUP/#4-oi-trien-khai","title":"4. \u0110\u1ee3i Tri\u1ec3n khai","text":"<p>GitHub Action s\u1ebd t\u1ef1 \u0111\u1ed9ng: 1. Build trang MkDocs 2. Deploy l\u00ean nh\u00e1nh <code>gh-pages</code> 3. L\u00e0m cho n\u00f3 kh\u1ea3 d\u1ee5ng t\u1ea1i custom domain c\u1ee7a b\u1ea1n</p> <p>Th\u1eddi gian: - GitHub Actions deploy: ~2-5 ph\u00fat - DNS propagation: 5-30 ph\u00fat - SSL certificate: 10-60 ph\u00fat</p>"},{"location":"vi/SETUP/#5-xac-minh-trien-khai","title":"5. X\u00e1c minh Tri\u1ec3n khai","text":"<p>Sau ~30 ph\u00fat, truy c\u1eadp: - https://docs.go.meme (custom domain c\u1ee7a b\u1ea1n) - https://go-meme.github.io/gomeme-docs (GitHub Pages m\u1eb7c \u0111\u1ecbnh)</p> <p>C\u1ea3 hai \u0111\u1ec1u n\u00ean hi\u1ec3n th\u1ecb t\u00e0i li\u1ec7u c\u1ee7a b\u1ea1n!</p>"},{"location":"vi/SETUP/#cap-nhat-tai-lieu","title":"\ud83d\udd04 C\u1eadp nh\u1eadt T\u00e0i li\u1ec7u","text":""},{"location":"vi/SETUP/#phat-trien-local","title":"Ph\u00e1t tri\u1ec3n Local","text":"<ol> <li> <p>C\u00e0i \u0111\u1eb7t dependencies:    <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Ch\u1ea1y local server:    <pre><code>mkdocs serve\n</code></pre></p> </li> </ol> <p>Truy c\u1eadp: http://127.0.0.1:8000</p> <ol> <li> <p>Thay \u0111\u1ed5i c\u00e1c t\u1ec7p <code>.md</code></p> </li> <li> <p>Commit v\u00e0 push:    <pre><code>git add .\ngit commit -m \"C\u1eadp nh\u1eadt t\u00e0i li\u1ec7u\"\ngit push\n</code></pre></p> </li> </ol>"},{"location":"vi/SETUP/#tu-ong-trien-khai","title":"T\u1ef1 \u0111\u1ed9ng Tri\u1ec3n khai","text":"<p>M\u1ed7i l\u1ea7n push l\u00ean nh\u00e1nh <code>main</code> s\u1ebd t\u1ef1 \u0111\u1ed9ng: 1. K\u00edch ho\u1ea1t GitHub Actions 2. Build trang v\u1edbi MkDocs 3. Deploy l\u00ean GitHub Pages 4. C\u1eadp nh\u1eadt https://docs.go.meme</p>"},{"location":"vi/SETUP/#xu-ly-su-co","title":"\ud83d\udc1b X\u1eed l\u00fd S\u1ef1 c\u1ed1","text":""},{"location":"vi/SETUP/#github-pages-khong-hien-thi","title":"GitHub Pages kh\u00f4ng hi\u1ec3n th\u1ecb","text":"<ol> <li>Ki\u1ec3m tra GitHub Actions: https://github.com/go-meme/gomeme-docs/actions</li> <li>\u0110\u1ea3m b\u1ea3o workflow ho\u00e0n th\u00e0nh th\u00e0nh c\u00f4ng</li> <li>Ki\u1ec3m tra nh\u00e1nh <code>gh-pages</code> t\u1ed3n t\u1ea1i</li> <li>X\u00e1c minh c\u00e0i \u0111\u1eb7t Pages tr\u1ecf \u0111\u1ebfn nh\u00e1nh <code>gh-pages</code></li> </ol>"},{"location":"vi/SETUP/#custom-domain-khong-hoat-ong","title":"Custom domain kh\u00f4ng ho\u1ea1t \u0111\u1ed9ng","text":"<ol> <li>Ki\u1ec3m tra b\u1ea3n ghi DNS trong Cloudflare</li> <li>X\u00e1c minh t\u1ec7p CNAME ch\u1ee9a <code>docs.go.meme</code></li> <li>\u0110\u1ee3i 30-60 ph\u00fat cho DNS propagation</li> <li>Ki\u1ec3m tra c\u00e0i \u0111\u1eb7t GitHub Pages hi\u1ec3n th\u1ecb domain \u0111\u00e3 \u0111\u01b0\u1ee3c x\u00e1c minh</li> </ol>"},{"location":"vi/SETUP/#https-khong-hoat-ong","title":"HTTPS kh\u00f4ng ho\u1ea1t \u0111\u1ed9ng","text":"<ol> <li>\u0110\u1ee3i 10-60 ph\u00fat \u0111\u1ec3 c\u1ea5p certificate</li> <li>\u0110\u1ea3m b\u1ea3o \"Enforce HTTPS\" \u0111\u01b0\u1ee3c ch\u1ecdn trong c\u00e0i \u0111\u1eb7t GitHub Pages</li> <li>X\u00f3a cache tr\u00ecnh duy\u1ec7t</li> </ol>"},{"location":"vi/SETUP/#checklist","title":"\u2705 Checklist","text":"<ul> <li> B\u1eadt GitHub Pages trong c\u00e0i \u0111\u1eb7t repository</li> <li> C\u1ea5u h\u00ecnh nh\u00e1nh <code>gh-pages</code> l\u00e0m ngu\u1ed3n</li> <li> \u0110\u1eb7t custom domain th\u00e0nh <code>docs.go.meme</code> trong GitHub</li> <li> Th\u00eam b\u1ea3n ghi CNAME trong Cloudflare DNS</li> <li> \u0110\u1ee3i tri\u1ec3n khai \u0111\u1ea7u ti\u00ean ho\u00e0n th\u00e0nh</li> <li> X\u00e1c minh trang c\u00f3 th\u1ec3 truy c\u1eadp t\u1ea1i https://docs.go.meme</li> <li> B\u1eadt HTTPS enforcement</li> <li> Ki\u1ec3m tra ph\u00e1t tri\u1ec3n local v\u1edbi <code>mkdocs serve</code></li> </ul>"},{"location":"vi/SETUP/#hoan-thanh","title":"\ud83c\udf89 Ho\u00e0n th\u00e0nh!","text":"<p>Khi t\u1ea5t c\u1ea3 c\u00e1c b\u01b0\u1edbc ho\u00e0n t\u1ea5t, t\u00e0i li\u1ec7u c\u1ee7a b\u1ea1n s\u1ebd c\u00f3 m\u1eb7t t\u1ea1i:</p> <p>\ud83c\udf10 https://docs.go.meme</p> <p>M\u1ed7i l\u1ea7n push l\u00ean nh\u00e1nh <code>main</code> s\u1ebd t\u1ef1 \u0111\u1ed9ng c\u1eadp nh\u1eadt trang trong v\u00e0i ph\u00fat!</p>"}]}